<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitLab-.gitlab-ci.yml</title>
      <link href="/2023/05/23/GitLab-gitlab-ci-yml/"/>
      <url>/2023/05/23/GitLab-gitlab-ci-yml/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;gitlab-ci.yml文件中指定了CI的触发条件、工作内容、工作流程，编写和理解此文件是CI实战中最重要的一步，该文件指定的任务内容总体构成了1个pipeline、1个pipeline包含不同的stage执行阶段、每个stage包含不同的具体job脚本任务</p></blockquote><hr>        <h5 id="关键参数说明"   >          <a href="#关键参数说明" class="heading-link"><i class="fas fa-link"></i></a>关键参数说明</h5>      <ul><li>default<ul><li>为某些关键字设置全局默认值(推荐将全局的默认值放入default中)</li><li>after_script,artifacts,before_script,cache,hooks,image,interruptible,retry,services,tags,timeout 以上关键字可定义全局默认值</li></ul></li><li>before_script<ul><li>用于定义一个命令，该命令在每个作业之前运行。必须是一个数组，before_script失败会影响作业失败)</li></ul></li><li>after_script<ul><li>用于定义将在每个作业（包括失败的作业）之后运行的命令。这必须是一个数组，after_script失败不会影响作业失败</li></ul></li><li>stages<ul><li>定义管道的阶段 并指定阶段执行顺序;如果全局未定义stages,则按默认阶段顺序运行 build,test,deploy</li><li>同阶段的任务将会并发的执行;上一个阶段的任务完整的结束之后，下一个阶段的任务才会开始执行</li></ul></li><li>script<ul><li>指定 runner 要执行的命令</li><li>单行或数组</li></ul></li><li>tags<ul><li>指定job的运行runner(设置时设置指定runner的标签)</li></ul></li><li>variables<ul><li>定义变量；优先级 项目设置variable&gt;Run pipeline设置变量&gt;gitlab-ci.yml文件设置job变量&gt;gitlab-ci.yml文件设置全局变量</li><li>可选配置 value,description</li></ul></li><li>allow_failure<ul><li>allow_failure允许作业失败，默认值为false</li></ul></li><li>when <ul><li>on_success前面阶段中的所有作业都成功（或由于标记为allow_failure而被视为成功）时才执行作业。 这是默认值。</li><li>on_failure当前面阶段出现失败则执行</li><li>always -执行作业，而不管先前阶段的作业状态如何,总是执行</li><li>manual 手动执行作业,不会自动执行，需要由用户显式启动</li><li>delayed：作业的执行延迟指定的持续时间,配合start_in使用(‘5’,10 seconds,30 minutes, 1 day, 1 week)</li><li>never：不要运行作业。只能在 rules 部分或 workflow: rules 中使用</li></ul></li><li>retry<ul><li>配置在失败的情况下重试作业的次数,成功后将不再进行重试</li><li>可选项 max ：最大重试次数，when ：重试失败的案例.</li></ul></li><li>timeout <ul><li>特定作业配置超时，作业级别的超时可以超过项目级别的超时，但不能超过Runner特定的超时</li></ul></li><li>parallel<ul><li>配置要并行运行的作业实例数,此值必须大于或等于2并且小于或等于50</li></ul></li><li>only &amp; except<ul><li>可使用正则表达式</li><li>允许使用特殊的关键字：branches，tags和triggers等</li><li>only定义哪些分支和标签的git项目将会被job执行</li><li>except定义哪些分支和标签的git项目将不会被job执行</li></ul></li><li>rules<ul><li>允许按顺序评估单个规则对象的列表，直到一个匹配并为作业动态提供属性</li><li>不可与only&amp;except关键字一起使用</li><li>可用规则if，changes，exists </li></ul></li><li>cache<ul><li>用来指定需要在job之间缓存的文件或目录.</li></ul></li></ul><p>注意:如果在windows的批处理中使用变量需要使用%%代替$</p><p><span class="exturl"><a class="exturl__link"   href="https://docs.gitlab.cn/jh/ci/yaml/#gitlab-ciyml-%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E8%80%83"  target="_blank" rel="noopener">参考链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h5 id="预定义变量"   >          <a href="#预定义变量" class="heading-link"><i class="fas fa-link"></i></a>预定义变量</h5>      <ul><li>CI_PROJECT_DIR  仓库克隆到的完整路径，以及作业从哪里运行(项目的根目录),如果设置了 GitLab Runner builds_dir 参数，这个变量是相对于 builds_dir 的值设置的</li></ul><p><span class="exturl"><a class="exturl__link"   href="https://docs.gitlab.cn/jh/ci/variables/predefined_variables.html#%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%8F%82%E8%80%83"  target="_blank" rel="noopener">参考链接</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h5 id="外部设置变量"   >          <a href="#外部设置变量" class="heading-link"><i class="fas fa-link"></i></a>外部设置变量</h5>      <ul><li>项目设置变量<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-51.png"  alt="upload successful">      </li><li>流水线运行时设置变量<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-53.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-54.png"  alt="upload successful">      </li></ul>        <h5 id="快速校验文件"   >          <a href="#快速校验文件" class="heading-link"><i class="fas fa-link"></i></a>快速校验文件</h5>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-55.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-57.png"  alt="upload successful">      </p><p>前端例子：</p>  <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">#管道阶段</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># 此处的tags必须填入之前注册时自定的tag</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">share-runner</span></span><br><span class="line">  <span class="comment">#重试次数</span></span><br><span class="line">  <span class="attr">retry:</span></span><br><span class="line">    <span class="attr">max:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">when:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">script_failure</span></span><br><span class="line">  <span class="comment"># 执行脚本</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始安装依赖 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="comment">#Copy-Item  打包文件目录($CI_PROJECT_DIR为项目的路径) nginx部署目录 -recurse -force</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Copy-Item</span>  <span class="string">$CI_PROJECT_DIR\dist\*</span> <span class="string">D:\nginx-1.24.0\html</span>  <span class="string">-recurse</span> <span class="string">-force</span></span><br><span class="line">    <span class="comment">#清除cache缓存</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rimraf</span> <span class="string">node_modules</span></span><br></pre></td></tr></table></div></figure><p> 后端例子:<br><br> start.bat<br> <figure class="highlight bat"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">%<span class="number">1</span> mshta vbscript:CreateObject("WScript.Shell").Run("%~s0 ::",<span class="number">0</span>,FALSE)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line">java -Dfile.encoding=utf-<span class="number">8</span> -jar  test.jar --server.port=<span class="number">8112</span> &gt;test-log.log  <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></div></figure><br>  shutdown.bat<br> <figure class="highlight bat"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">%<span class="number">1</span> mshta vbscript:CreateObject("Shell.Application").ShellExecute("<span class="built_in">cmd</span>.exe","/c %~s0 ::","","runas",<span class="number">1</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"><span class="built_in">set</span> port=<span class="number">8111</span></span><br><span class="line"><span class="keyword">for</span> /f "tokens=<span class="number">1</span>-<span class="number">5</span>" <span class="variable">%%i</span> <span class="keyword">in</span> ('netstat -ano^|<span class="built_in">findstr</span> ":<span class="variable">%port%</span>"') <span class="keyword">do</span> (<span class="built_in">taskkill</span> /t /f /pid <span class="variable">%%m</span>)</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></div></figure></p>   <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># 本次构建的阶段： compile、package、deploy</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">compile</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置流水线规则</span></span><br><span class="line"><span class="attr">workflow:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="comment">#只有当分支为指定分支时执行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">"gitlab-cicd"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#缓存</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$CI_PROJECT_DIR\test\target</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="comment">#打包文件存放路径</span></span><br><span class="line">  <span class="attr">PACKAGE_PATH:</span> <span class="string">D:\packages</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="attr">compile:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">compile</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">share-runner</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始编译任务 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">    <span class="comment">#如果需要指定依赖 可以通过 -s 可以指定maven的setting.xml文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">'-Dmaven.test.skip=true'</span> <span class="string">-s</span> <span class="string">D:\apache-maven-3.5.3\conf\setting-lqs.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line"><span class="attr">package:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">share-runner</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始打包任务 ==============="</span></span><br><span class="line">    <span class="comment"># 复制jar包到文件夹</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">copy</span> <span class="string">$CI_PROJECT_DIR\test\target\*.jar</span> <span class="string">$PACKAGE_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动jar包</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">share-runner</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始部署任务  ==============="</span></span><br><span class="line">    <span class="comment">#进入到部署目录</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">$PACKAGE_PATH</span></span><br><span class="line">    <span class="comment">#停止相关服务</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.\shutdown.bat</span></span><br><span class="line">    <span class="comment">#删除日志文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Remove-Item</span>  <span class="string">$CI_PROJECT_DIR\*.log</span> <span class="string">-Recurse</span> <span class="string">-Force</span></span><br><span class="line">    <span class="comment">#部署服务</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.\test-start.bat</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab-Runner</title>
      <link href="/2023/05/22/GitLab-Runner/"/>
      <url>/2023/05/22/GitLab-Runner/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;GitLab-Runner就是一个用来执行.gitlab-ci.yml 脚本的工具，可以运行在不同的操作系统上，每次push的时候 GitLab CI 会根据.gitlab-ci.yml配置文件运行你流水线（Pipeline）中各个阶段的任务（Job），并通过runner将结果发送回 GitLab。可以理解成，Runner就像认真工作的工人，GitLab-CI就是管理工人的中心，所有工人都要在GitLab-CI里面注册，并且表明自己是为哪个项目服务。当相应的项目发生变化时，GitLab-CI就会通知相应的工人执行对应的脚本。<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-48.png"  alt="upload successful">      </p></blockquote>        <h5 id="特点"   >          <a href="#特点" class="heading-link"><i class="fas fa-link"></i></a>特点:</h5>      <ol><li>可以部署在不同的机器上  </li><li>同时运行多个任务      </li><li>可以支持多平台和不同的运行环境     </li></ol>        <h5 id="runner类型"   >          <a href="#runner类型" class="heading-link"><i class="fas fa-link"></i></a>runner类型</h5>      <ul><li><p>Shared Runners<br>shared Runners 是作用于整个gitlab的所有项目的，所以要gitlab的admin权限来进行配置注册</p></li><li><p>Specific Runners<br>specific runners是最特殊的runner，是配到我们具体项目中的，但是可以选择是否让runner锁定项目，来达到和其他项目做到共享runner的目的</p></li><li><p>group runners<br>group runner运行特定group下的所有项目的作业</p></li></ul><p>&nbsp;&nbsp;&nbsp;为了不占用过多的服务器资源，可以将gitrunner搭建在其他服务器上</p><ul><li>Linux配置文件目录：/etc/gitlab-runner/config.toml 修改后会自动更改</li><li>Windowsx配置文件目录：C:\GitLab-Runner/config.toml</li></ul>        <h5 id="安装："   >          <a href="#安装：" class="heading-link"><i class="fas fa-link"></i></a>安装：</h5>      <p>   根据要安装的runner类型，在相关的设置页面获取到对应的token和url，并且该页面提供了不同环境下runner的安装方式<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-49.png"  alt="upload successful">      </p><p> 选择对应的安装方式<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-63.png"  alt="upload successful">      </p><p>配置文件目录(修改后会自动更改)</p><ul><li>Linux默认配置文件目录：/etc/gitlab-runner/config.toml </li><li>Windowsx默认配置文件目录：C:\GitLab-Runner/config.toml</li></ul>        <h5 id="注册："   >          <a href="#注册：" class="heading-link"><i class="fas fa-link"></i></a>注册：</h5>      <p>输入命令：<br><br>Linux： gitlab-runner register<br><br>Windows：.\gitlab-runner.exe start(进入runner的安装目录)<br>按照步骤提示，输入指定的信息</p><ol><li>Enter the GitLab instance URL (for example,<span class="exturl"><a class="exturl__link"   href="https://gitlab.com/"  target="_blank" rel="noopener">https://gitlab.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>):</li><li>Enter the registration token:</li><li>Enter a description for the runner:(输入描述)</li><li>Enter tags for the runner (comma-separated):(输入标签)</li><li>Enter optional maintenance note for the runner:(输入可选维护说明,可以跟执行器的名称一致)</li><li>Enter an executor: docker-ssh+machine, custom, docker, docker-windows, docker-ssh, parallels, virtualbox, docker+machine, kubernetes, shell, ssh, docker-autoscaler, instance:(选择执行器)</li></ol><p><strong>GitLab Runner 支持的执行器:</strong><br><span class="exturl"><a class="exturl__link"   href="https://chengweichen.com/2021/03/gitlab-ci-executor.html"  target="_blank" rel="noopener">https://chengweichen.com/2021/03/gitlab-ci-executor.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>Shell 执行器<br><br>Shell 是最简单的执行器。您的构建所需的所有必须依赖项都需要手动安装在极狐GitLab Runner 所安装的机器上。</li><li>虚拟机执行器（VirtualBox / Parallels）<br><br>这种类型的执行器允许您使用已经创建的虚拟机，它被克隆且用于运行构建。我们提供两个完整的系统虚拟化选项：VirtualBox 和 Parallels。如果您想在不同操作系统上运行构建，它们很有用，因为它允许在 Windows、Linux、macOS 或 FreeBSD 上创建虚拟机，然后极狐GitLab Runner 连接虚拟机并在上面运行构建。它可以降低基础设施的成本。</li><li>Docker 执行器<br><br>使用 Docker 是个很好的选择，因为它允许使用简单的依赖项管理（所有构建项目所需的依赖项都可以放到 Docker 镜像里）生成干净的构建环境。 Docker 执行器允许您很容易地使用依赖的服务， 例如 MySQL，创建构建环境。</li><li>Docker Machine 执行器<br><br>Docker Machine 是特殊版本的支持弹性伸缩的 Docker 执行器。 它类似正常的 Docker 执行器， 但由 Docker Machine 按需创建构建主机。</li><li>Kubernetes 执行器<br>Kubernetes 执行器允许您使用您构建现存的 Kubernetes 集群。 执行器会调用 Kubernetes 集群 API 并为每个极狐GitLab CI 作业创建新的 Pod（带有构建容器和服务容器）。</li><li>SSH 执行器<br><br>SSH 执行器是为执行器介绍完整性而添加进来的，它是所有执行器中最不受支持的一个。 它使极狐GitLab Runner 连接到外部服务器并运行构建。机构有一些使用 SSH 执行器的成功案例，但是通常我们推荐您使用其他类型的执行器。</li><li>自定义执行器</li></ul>        <h5 id="相关操作命令"   >          <a href="#相关操作命令" class="heading-link"><i class="fas fa-link"></i></a>相关操作命令:</h5>      <p><span class="exturl"><a class="exturl__link"   href="https://docs.gitlab.cn/runner/commands/"  target="_blank" rel="noopener">https://docs.gitlab.cn/runner/commands/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>常用操作<br>注册runner</p><blockquote><p>gitlab-runner register</p></blockquote><p>查看注册的runner列表</p><blockquote><p>gitlab-runner list</p></blockquote><p>查看各个runner的状态</p><blockquote><p>gitlab-runner status</p></blockquote><p>查看注册的runner是否已连接gitlab</p><blockquote><p>gitlab-runner verify</p></blockquote><p>删除某个runner</p><blockquote><p>gitlab-runner verify –delete –name runnerName</p></blockquote><p>注销runner</p><blockquote><p>gitlab-runner unregister –url <span class="exturl"><a class="exturl__link"   href="http://192.168.60.122/"  target="_blank" rel="noopener">http://192.168.60.122/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> –token _AsrLAtEd2nrp1nztBqM</p></blockquote>        <h5 id="下载其他标签发布"   >          <a href="#下载其他标签发布" class="heading-link"><i class="fas fa-link"></i></a>下载其他标签发布</h5>      <p>使用 tag（例如 v11.4.2）或 latest（最新的 Stable）替换 main。更多关于标签列表的内容，请参见 <span class="exturl"><a class="exturl__link"   href="https://jihulab.com/gitlab-cn/gitlab-runner/-/tags。"  target="_blank" rel="noopener">https://jihulab.com/gitlab-cn/gitlab-runner/-/tags。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><br>例如：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://s3.amazonaws.com/gitlab-runner-downloads/main/binaries/gitlab-runner-linux-386"  target="_blank" rel="noopener">https://s3.amazonaws.com/gitlab-runner-downloads/main/binaries/gitlab-runner-linux-386</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://s3.amazonaws.com/gitlab-runner-downloads/latest/binaries/gitlab-runner-linux-386"  target="_blank" rel="noopener">https://s3.amazonaws.com/gitlab-runner-downloads/latest/binaries/gitlab-runner-linux-386</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://s3.amazonaws.com/gitlab-runner-downloads/v11.4.2/binaries/gitlab-runner-linux-386"  target="_blank" rel="noopener">https://s3.amazonaws.com/gitlab-runner-downloads/v11.4.2/binaries/gitlab-runner-linux-386</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD</title>
      <link href="/2023/05/20/GitLab-CICD/"/>
      <url>/2023/05/20/GitLab-CICD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;GitLab CI/CD 是一个内置在GitLab中的工具，通过持续方法对项目进行相关操作，中心思想就是基于自动执行脚本，每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，以最大限度地减少在开发应用程序时引入错误的可能性。从新代码的开发到部署，仅需较少的人为干预甚至根本不需要人工干预。</p></blockquote><hr><p>&nbsp;&nbsp;&nbsp;达到持续的方法主要是：持续集成，持续交付，持续部署。<br></p><ul><li>持续集成(Continuous Integration)<br><br>对于提交给应用程序（甚至是开发分支）的每项更改，它都会自动连续进行构建和测试，以确保所引入的更改符合标准（通过maven，gradle打包时自动化构建，如果提前写好了单元测试用例，也可以进行代码的测试。)</li><li>持续交付(Continuous Delivery)<br><br>每次将代码更改推送到代码库时，不仅会构建和测试您的应用程序，还会持续部署应用程序。但是，对于持续交付，您需要手动触发部署。</li><li>持续部署(Continuous Deployment)<br><br>与持续交付类似，但不同之处在于，你无需将其手动部署，而是将其设置为自动部署。完全不需要人工干预即可部署你的应用程序</li></ul><p><strong>CI/CD 组成部分</strong><br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-44.png"  alt="upload successful">      <br><strong>pipeline（管道、流水线）</strong> </p><ul><li>一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程（Stage），比如自动构建、自动进行单元测试、自动进行代码检查等流程 ;</li><li>任何提交或者 Merge Request 的合并都可以触发 Pipeline ;<br></li></ul><p><strong>Stage（构建阶段）</strong></p><ul><li>可以在一个Stage中定义多个 jobs(作业);</li><li>Stage有如下特点 : <ul><li>所有 stages 会按照顺序运行，即当一个 stage 完成后，下一个 Stage才会开始</li><li>只有当所有 Stage 成功完成后，该构建任务 Pipeline 才算成功</li><li>如果任何一个 Stage失败，那么后面的 Stage 不会执行，该构建任务 (Pipeline) 失败</li></ul></li><li>阶段是对批量的作业的一个逻辑上的划分，每个 pipeline都必须包含至少一个 Stage。多个 Stage是按照顺序执行的，如果其中任何一个 Stage失败，则后续的 Stage不会被执行，整个 CI 过程被认为失败。<br></li></ul><p><strong>Jobs（作业）</strong></p><ul><li>job表示构建工作，表示某个stage里面执行的工作 ;</li><li>一个stage里面可以定义多个job ;</li><li>jobs有如下特点 : <ul><li>相同 stage 中的jobs 会并行执行</li><li>相同 stage 中的 jobs 都执行成功时，该 stage 才会成功</li><li>如果任何一个job 失败，那么该 stage 失败，即该构建任务 (Pipeline) 失败(可以通过allow_failure关键字允许作业失败)</li></ul></li></ul><p>此工作流显示了GitLab 流程中的主要步骤:<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-45.png"  alt="upload successful">      <br>开发者在push或者merge代码到指定分支的时候，会触发CI/CD，自动实现构建/测试，打包，部署发布等流程，而这些具体的操作都是由GitLab CI/CD的运行工具 GitLab-Runner去执行配置文件(.gitlab-ci.yml)的内容来实现的。<br>执行前的准备：</p><ol><li>安装及注册GitRunner</li><li>编写.gitlab-ci.yml配置文件 </li></ol><p><strong>开启或关闭CI/CD</strong><br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-62.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-47.png"  alt="upload successful">      </p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>订阅MySql的binlog日志</title>
      <link href="/2023/03/01/%E8%AE%A2%E9%98%85binlog%E6%97%A5%E5%BF%97/"/>
      <url>/2023/03/01/%E8%AE%A2%E9%98%85binlog%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;最近遇到需要记录业务表字段变化记录的需求；刚开始准备使用触发器来实现相关操作，但由于业务表数量较多，并且没有专门的运维人员，考虑到触发器后期维护也相对困难，就舍弃了该方案；后面了解到可以通过订阅binlog的方案来实现需求。</p></blockquote><hr><p>两种方案对比：</p><ul><li><p><strong>mysql-binlog-connector</strong><br><br>通过引入依赖jar包实现，需要自行实现解析，相对轻量。</p></li><li><p><strong>canal</strong><br><br>阿里的数据同步中间件，运行比较稳定，功能强大，支持数据库及MQ的同步，但是维护成本高，需要单独开启服务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;针对当前的业务需求选择了更轻量的mysql-binlog-connector，以下是实现订阅监听binlog日志的配置初始化过程</p><ol><li><p>首先查询MySql是否开启了binlog<br><br>show variables like ‘log_bin’;<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-43.png"  alt="upload successful">      <br>如果显示ON则表示已开启，未开启则在my.ini配置文件中设置以下属性</p><ul><li>log_bin=mysql-bin</li><li>binlog-format=Row</li></ul></li><li><p>其中binlog-format有三种模式选择：<br>mysql复制方式 </p><ul><li>STATEMENT  记录的是执行的SQL语句</li><li>ROW  记录的是每一行数据的修改, MySQL5.7+的默认ROW格式.</li><li>MIXED 在Mixed模式下，MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志格式，也就是在Statement和Row之间选择一种。</li></ul></li><li><p>重启mysql服务 </p><ul><li>net stop mysql</li><li>net start mysql</li></ul></li></ol></li></ul><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;实现代码<br><br>1.pom.xml引入依赖<br>  <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 监听mysql binlog --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.shyiko<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-binlog-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.21.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><br>2.application.yml配置文件修改</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 订阅binlog数据库连接信息，ip，端口，用户密码（用户必须要有权限）</span></span><br><span class="line"><span class="attr">binlog:</span></span><br><span class="line">  <span class="comment">#订阅日志开关</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#订阅数据信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#数据库ip</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.60</span><span class="number">.177</span></span><br><span class="line">    <span class="comment">#数据库端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3307</span></span><br><span class="line">    <span class="comment">#用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#密码</span></span><br><span class="line">    <span class="attr">passwd:</span> <span class="string">root</span></span><br><span class="line">  <span class="comment">#监听的数据库</span></span><br><span class="line">  <span class="attr">db:</span> <span class="string">ylsoft_dev</span></span><br><span class="line">  <span class="comment">#监听的数据表 默认监听所有的业务表(yl_cusform表)</span></span><br><span class="line">  <span class="attr">table:</span></span><br></pre></td></tr></table></div></figure><p>3.监听器的初始化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinLogListener</span> <span class="keyword">implements</span> <span class="title">BinaryLogClient</span>.<span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CusformChangeLogService cusformChangeLogService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommonMapper commonMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BinLogConstants binLogConstants;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;binlog.enable&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean binlogEnable;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> consumerThreads = BinLogConstants.consumerThreads;</span><br><span class="line">    <span class="comment">//数据库名称</span></span><br><span class="line">    <span class="keyword">private</span> String dbName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BinaryLogClient parseClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Map&lt;String, List&lt;CusformChangeLog&gt;&gt;&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExecutorService consumer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存放每张数据表对应的listener</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, TableBinLogListener&gt; listeners;</span><br><span class="line">    <span class="comment">//存放业务表字段信息(TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE, ORDINAL_POSITION)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Map&lt;String, Column&gt;&gt; dbTableCols;</span><br><span class="line">    <span class="comment">// 存放每张表需要查询历史记录的字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Map&lt;String, CusformField&gt;&gt; historyFieldMap;</span><br><span class="line">    <span class="keyword">private</span> String dbTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听器初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinLogListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BinaryLogClient client = <span class="keyword">new</span> BinaryLogClient(binLogConstants.getHost(), binLogConstants.getPort(), binLogConstants.getUsername(), binLogConstants.getPasswd());</span><br><span class="line">        EventDeserializer eventDeserializer = <span class="keyword">new</span> EventDeserializer();</span><br><span class="line">        <span class="comment">//eventDeserializer.setCompatibilityMode(//序列化</span></span><br><span class="line">        <span class="comment">//        EventDeserializer.CompatibilityMode.DATE_AND_TIME_AS_LONG,</span></span><br><span class="line">        <span class="comment">//        EventDeserializer.CompatibilityMode.CHAR_AND_BINARY_AS_BYTE_ARRAY</span></span><br><span class="line">        <span class="comment">//);</span></span><br><span class="line">        client.setEventDeserializer(eventDeserializer);</span><br><span class="line">        <span class="keyword">this</span>.parseClient = client;</span><br><span class="line">        <span class="keyword">this</span>.queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">this</span>.listeners = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.dbTableCols = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.consumer = Executors.newFixedThreadPool(consumerThreads);</span><br><span class="line">        <span class="keyword">this</span>.dbName = binLogConstants.getDb();</span><br><span class="line">        <span class="comment">//缓存自定义表单开启历史记录查询的字段</span></span><br><span class="line">        initHistoryFieldMap();</span><br><span class="line">        List&lt;String&gt; tableList;</span><br><span class="line">        <span class="comment">//判断是否配置表名白名单，如果未配置则默认加载所有未删除的业务表(cus_*)</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(binLogConstants.getTable())) &#123;</span><br><span class="line">            tableList = Arrays.asList(binLogConstants.getTable().split(<span class="string">","</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tableList = commonMapper.select(<span class="string">"SELECT business_table_name as businessTableName FROM yl_cusform WHERE delete_status = 0"</span>).stream().map(e -&gt; Convert.toStr(e.get(<span class="string">"businessTableName"</span>))).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isEmpty(tableList)) &#123;</span><br><span class="line">            client.disconnect();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//业务表注册监听器</span></span><br><span class="line">        tableList.forEach(tableName -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"注册监听信息，注册DB："</span> + dbName + <span class="string">"，注册表："</span> + tableName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                regListener(<span class="keyword">null</span>, OptTypeEnum.INIT, dbName, tableName, item -&gt; &#123;</span><br><span class="line">                    cusformChangeLogService.dealWithLogData(item);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"BinLog监听异常:"</span> + e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 多线程消费</span></span><br><span class="line">        parse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存自定义表单开启历史记录查询的字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initHistoryFieldMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        historyFieldMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询自定义表单中开启历史记录查询的字段</span></span><br><span class="line">        List&lt;HashMap&gt; fieldList = commonMapper.select(<span class="string">"SELECT CONCAT('"</span> + dbName + <span class="string">"','-',yc.business_table_name) as dbTableName,ycf.field_id as fieldId,ycf.input_type as inputType,ycf.title FROM yl_cusform AS yc LEFT JOIN yl_cusform_field AS ycf ON ycf.cusformid = yc.id and ycf.hist_data_status = 1\n"</span> +</span><br><span class="line">            <span class="string">"WHERE yc.delete_status = 0 and ycf.delete_status = 0"</span>);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isNotEmpty(fieldList)) &#123;</span><br><span class="line">            fieldList.stream().forEach(field -&gt; &#123;</span><br><span class="line">                String dbTableName = Convert.toStr(field.get(<span class="string">"dbTableName"</span>));</span><br><span class="line">                String inputType = Convert.toStr(field.get(<span class="string">"inputType"</span>));</span><br><span class="line">                String fieldId = Convert.toStr(field.get(<span class="string">"fieldId"</span>));</span><br><span class="line">                String title = Convert.toStr(field.get(<span class="string">"title"</span>));</span><br><span class="line">                Map&lt;String, CusformField&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (historyFieldMap.containsKey(dbTableName)) &#123;</span><br><span class="line">                    map = historyFieldMap.get(dbTableName);</span><br><span class="line">                &#125;</span><br><span class="line">                map.put(fieldId, CusformField.builder().inputType(inputType).title(title).build());</span><br><span class="line">                historyFieldMap.put(dbTableName, map);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接dbTable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDbTable</span><span class="params">(String dbName, String tableName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dbName + <span class="string">"-"</span> + tableName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        EventType eventType = event.getHeader().getEventType();</span><br><span class="line">        <span class="keyword">if</span> (eventType == EventType.TABLE_MAP) &#123;</span><br><span class="line">            TableMapEventData tableData = event.getData();</span><br><span class="line">            String db = tableData.getDatabase();</span><br><span class="line">            String table = tableData.getTable();</span><br><span class="line">            dbTable = getDbTable(db, table);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只处理添加删除更新三种操作,只有表中存在开启历史记录的字段时才去记录</span></span><br><span class="line">        <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">            <span class="comment">//新增</span></span><br><span class="line">            <span class="keyword">case</span> PRE_GA_WRITE_ROWS:</span><br><span class="line">            <span class="keyword">case</span> WRITE_ROWS:</span><br><span class="line">            <span class="keyword">case</span> EXT_WRITE_ROWS: &#123;</span><br><span class="line">                WriteRowsEventData data = event.getData();</span><br><span class="line">                <span class="keyword">for</span> (Serializable[] row : data.getRows()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (historyFieldMap.containsKey(dbTable)) &#123;</span><br><span class="line">                        queue.add(Map.of(dbTable, cusformChangeLogService.itemFromInsertOrDeleted(dbTable, row, dbTableCols.get(dbTable), eventType)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            <span class="keyword">case</span> PRE_GA_UPDATE_ROWS:</span><br><span class="line">            <span class="keyword">case</span> UPDATE_ROWS:</span><br><span class="line">            <span class="keyword">case</span> EXT_UPDATE_ROWS: &#123;</span><br><span class="line">                UpdateRowsEventData data = event.getData();</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Serializable[], Serializable[]&gt; row : data.getRows()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (historyFieldMap.containsKey(dbTable)) &#123;</span><br><span class="line">                        queue.add(Map.of(dbTable, cusformChangeLogService.itemFromUpdate(dbTable, row, dbTableCols.get(dbTable), eventType)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//删除</span></span><br><span class="line">            <span class="keyword">case</span> PRE_GA_DELETE_ROWS:</span><br><span class="line">            <span class="keyword">case</span> DELETE_ROWS:</span><br><span class="line">            <span class="keyword">case</span> EXT_DELETE_ROWS: &#123;</span><br><span class="line">                DeleteRowsEventData data = event.getData();</span><br><span class="line">                <span class="keyword">for</span> (Serializable[] row : data.getRows()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (historyFieldMap.containsKey(dbTable)) &#123;</span><br><span class="line">                        queue.add(Map.of(dbTable, cusformChangeLogService.itemFromInsertOrDeleted(dbTable, row, dbTableCols.get(dbTable), eventType)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册监听器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cusformFields 自定义表单字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> optType       监听器操作类型 0--初始化  1--新增/更新  2-删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbName        数据库名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName     表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener      监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regListener</span><span class="params">(List&lt;CusformField&gt; cusformFields, OptTypeEnum optType, String dbName, String tableName, TableBinLogListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!binlogEnable) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拼接数据库名-表名</span></span><br><span class="line">        String dbTableName = getDbTable(dbName, tableName);</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">if</span> (OptTypeEnum.INIT.equals(optType) || OptTypeEnum.MODIFY.equals(optType)) &#123;</span><br><span class="line">            <span class="comment">// 获取字段集合</span></span><br><span class="line">            Map&lt;String, Column&gt; cols = getColMap(dbName, tableName);</span><br><span class="line">            <span class="comment">//缓存字段基础信息</span></span><br><span class="line">            dbTableCols.put(dbTableName, cols);</span><br><span class="line">            <span class="comment">// 保存当前注册的listener</span></span><br><span class="line">            listeners.put(dbTableName, listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新增/更新业务表</span></span><br><span class="line">        <span class="keyword">if</span> (OptTypeEnum.MODIFY.equals(optType)) &#123;</span><br><span class="line">            <span class="comment">//缓存自定义表单历史记录字段</span></span><br><span class="line">            historyFieldMap.put(dbTableName, cusformFields.stream().collect(Collectors.toConcurrentMap(CusformField::getFieldId, cusformField -&gt; cusformField)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除业务表</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (OptTypeEnum.DELETE.equals(optType)) &#123;</span><br><span class="line">            historyFieldMap.remove(dbTableName);</span><br><span class="line">            dbTableCols.remove(dbTableName);</span><br><span class="line">            listeners.remove(dbTableName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取column信息集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Column&gt; <span class="title">getColMap</span><span class="params">(String db, String table)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Column&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//字段中文名称也可从字段注释中取</span></span><br><span class="line">        List&lt;HashMap&gt; columnList = commonMapper.select(<span class="string">"SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE, ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '"</span> + db + <span class="string">"' and TABLE_NAME = '"</span> + table + <span class="string">"'"</span>);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isNotEmpty(columnList)) &#123;</span><br><span class="line">            map = columnList.stream().collect(Collectors.toConcurrentMap(e -&gt; Convert.toStr(e.get(<span class="string">"COLUMN_NAME"</span>))</span><br><span class="line">                , e -&gt; Column.builder().inx(Convert.toInt(e.get(<span class="string">"ORDINAL_POSITION"</span>)) - <span class="number">1</span>)</span><br><span class="line">                    .colName(Convert.toStr(e.get(<span class="string">"COLUMN_NAME"</span>)))</span><br><span class="line">                    .dataType(Convert.toStr(e.get(<span class="string">"DATA_TYPE"</span>)))</span><br><span class="line">                    .schema(Convert.toStr(e.get(<span class="string">"TABLE_SCHEMA"</span>)))</span><br><span class="line">                    .table(Convert.toStr(e.get(<span class="string">"TABLE_NAME"</span>))).build()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启多线程消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        parseClient.registerEventListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; consumerThreads; i++) &#123;</span><br><span class="line">            consumer.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Map&lt;String, List&lt;CusformChangeLog&gt;&gt; map = queue.take();</span><br><span class="line">                            <span class="keyword">if</span> (MapUtil.isNotEmpty(map)) &#123;</span><br><span class="line">                                map.forEach((k, v) -&gt; listeners.get(k).onEvent(v));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        parseClient.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere分布式数据库中间件</title>
      <link href="/2022/08/20/ShardingSphere%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2022/08/20/ShardingSphere%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;Apache ShardingSphere 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强。</p></blockquote><hr><pre><code>ShardingSphere-JDBC：定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务；是一个 Jar 包，底层通过重写 JDBC 组件完成 SQL 解析、路由、改写、执行等流程;需要在项目中添加对应功能的配置文件，对应用有一定侵入性;ShardingSphere-PROXY：定位为透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。是一个进程服务，大部分情况下定位为辅助开发运维的效率工具。它将自己伪装为数据库，应用对接后对代码是无侵入的;对 SQL 的执行逻辑同 ShardingSphere-JDBC 一致，两者复用同一内核。</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;通过 ShardingSphere-JDBC 是直接操作数据库，相当于只有一次网络 IO;而应用连接 ShardingSphere-Proxy 是一次网络 IO，ShardingSphere-Proxy 再操作数据库，又会发生一次网络 IO;<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-29.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-30.png"  alt="upload successful">      </p><ul><li><strong>ShardingSphere-PROXY安装</strong><br><br><span class="exturl"><a class="exturl__link"   href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/startup/bin/"  target="_blank" rel="noopener">官方教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><ol><li>下载ShardingSphere-PROXY二进制包<span class="exturl"><a class="exturl__link"   href="https://www.apache.org/dyn/closer.lua/shardingsphere/5.3.0/apache-shardingsphere-5.3.0-shardingsphere-proxy-bin.tar.gz"  target="_blank" rel="noopener">下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，教程的版本为5.0，不同版本，配置文件配置参数不同<br>下载完成后解压文件，conf的目录结构<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-31.png"  alt="upload successful">      </li><li>引入依赖<br><br>如果后端连接 PostgreSQL 或 openGauss 数据库，不需要引入额外依赖。<br><br>如果后端连接 MySQL 数据库，请下载 <span class="exturl"><a class="exturl__link"   href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar"  target="_blank" rel="noopener">mysql-connector-java-5.1.47.jar</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 或者 <span class="exturl"><a class="exturl__link"   href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.11/mysql-connector-java-8.0.11.jar"  target="_blank" rel="noopener">mysql-connector-java-8.0.11.jar</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，并将其放在/lib目录下</li><li>配置server.yaml </li></ol></li></ul>  <figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="type">!AUTHORITY</span></span><br><span class="line">   <span class="attr">users:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">root@%:root</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">sharding@:sharding</span></span><br><span class="line">   <span class="string">provider:#ALL_PRIVILEGES_PERMITTED</span> <span class="string">默认授予所有权限（不鉴权），不会与实际数据库交互；NATIVE</span> <span class="string">基于后端数据库存取</span> <span class="string">server.yaml</span> <span class="string">中配置的权限信息。如果用户不存在，则自动创建用户并默认赋予最高权限</span></span><br><span class="line">     <span class="attr">type:</span> <span class="string">ALL_PRIVILEGES_PERMITTED</span></span><br><span class="line"> <span class="bullet">-</span> <span class="type">!TRANSACTION</span></span><br><span class="line">   <span class="attr">defaultType:</span> <span class="string">XA</span></span><br><span class="line">   <span class="attr">providerType:</span> <span class="string">Atomikos</span></span><br><span class="line"></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line"><span class="comment">#  max-connections-size-per-query: 1</span></span><br><span class="line"><span class="comment">#  kernel-executor-size: 16  # Infinite by default.</span></span><br><span class="line"><span class="comment">#  proxy-frontend-flush-threshold: 128  # The default value is 128.</span></span><br><span class="line"><span class="comment">#  proxy-opentracing-enabled: false</span></span><br><span class="line"><span class="comment">#  proxy-hint-enabled: false</span></span><br><span class="line"> <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>  4.启动ShardingSphere-PROXY，进入到安装目录的bin文件下，通过 start.bat +端口号 命令启动</p><ul><li><strong>数据分片</strong><br></li></ul><p>1.配置config-sharding.yaml</p>  <figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">sharding_db</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line"> <span class="attr">ds_0:</span></span><br><span class="line">   <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:端口/demo_ds_0?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">   <span class="attr">username:</span> </span><br><span class="line">   <span class="attr">password:</span> </span><br><span class="line">   <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">   <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">   <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">   <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">   <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"><span class="string">rules:#分表规则</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line"> <span class="attr">tables:</span></span><br><span class="line"><span class="comment">#对t_order表进行分表</span></span><br><span class="line">   <span class="attr">t_order:</span></span><br><span class="line">     <span class="comment">#t_order_$&#123;0..1&#125;表示会分成t_order_0,t_order_1表，也可以对数据库进行区分如ds_$&#123;0..1&#125;对应上述的连接别名，</span></span><br><span class="line">     <span class="attr">actualDataNodes:</span> <span class="string">ds_0.t_order_$&#123;0..1&#125;</span></span><br><span class="line">     <span class="attr">tableStrategy:</span></span><br><span class="line">       <span class="attr">standard:</span></span><br><span class="line">         <span class="comment">#分表字段</span></span><br><span class="line">         <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">        <span class="comment">#分表算法别名</span></span><br><span class="line">         <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_inline</span></span><br><span class="line">     <span class="comment">#主键生成策略</span></span><br><span class="line">     <span class="comment">#keyGenerateStrategy:</span></span><br><span class="line">       <span class="comment">#column: order_id</span></span><br><span class="line">       <span class="comment">#keyGeneratorName: snowflake</span></span><br><span class="line"> <span class="attr">shardingAlgorithms:</span></span><br><span class="line">   <span class="attr">t_order_inline:</span></span><br><span class="line">     <span class="comment">#分片算法类型详情见https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/sharding/</span></span><br><span class="line">     <span class="attr">type:</span> <span class="string">MOD</span></span><br><span class="line">     <span class="attr">props:</span></span><br><span class="line">       <span class="attr">sharding-count:</span> <span class="number">2</span></span><br></pre></td></tr></table></div></figure><p> 2.测试连接代理服务(NAVICAT高版本会提示check the manual that corresponds to your MySQL server version for the right syntax to use near ‘SHOW VARIABLES LIKE ‘sql_mode’;异常)<br>         <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-32.png"  alt="upload successful">      <br> 3.根据config-sharding.yaml配置文件在代理服务器上新增相关数据<br>         <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-33.png"  alt="upload successful">      <br> 4.插入测试数据，查看数据库分表情况<br><br>order_id为1的记录取模运算后为1分到了t_order_1，order_id为2的记录取模运算后为0分到了t_order_0<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-34.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-35.png"  alt="upload successful">      </p><ul><li><strong>读写分离</strong><br><br>1.配置config-readwrite-splitting.yaml</li></ul>   <figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">sharding_db</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line"> <span class="attr">ds_0:</span></span><br><span class="line">   <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:端口/demo_ds_0?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">   <span class="attr">username:</span> </span><br><span class="line">   <span class="attr">password:</span> </span><br><span class="line">   <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">   <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">   <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">   <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">   <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"><span class="string">rules:#分表规则</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line"> <span class="attr">tables:</span></span><br><span class="line"><span class="comment">#对t_order表进行分表</span></span><br><span class="line">   <span class="attr">t_order:</span></span><br><span class="line">     <span class="comment">#t_order_$&#123;0..1&#125;表示会分成t_order_0,t_order_1表，也可以对数据库进行区分如ds_$&#123;0..1&#125;对应上述的连接别名，</span></span><br><span class="line">     <span class="attr">actualDataNodes:</span> <span class="string">ds_0.t_order_$&#123;0..1&#125;</span></span><br><span class="line">     <span class="attr">tableStrategy:</span></span><br><span class="line">       <span class="attr">standard:</span></span><br><span class="line">         <span class="comment">#分表字段</span></span><br><span class="line">         <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">        <span class="comment">#分表算法别名</span></span><br><span class="line">         <span class="attr">shardingAlgorithmName:</span> <span class="string">t_order_inline</span></span><br><span class="line">     <span class="comment">#主键生成策略</span></span><br><span class="line">     <span class="comment">#keyGenerateStrategy:</span></span><br><span class="line">       <span class="comment">#column: order_id</span></span><br><span class="line">       <span class="comment">#keyGeneratorName: snowflake</span></span><br><span class="line"> <span class="attr">shardingAlgorithms:</span></span><br><span class="line">   <span class="attr">t_order_inline:</span></span><br><span class="line">     <span class="comment">#分片算法类型详情见https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/sharding/</span></span><br><span class="line">     <span class="attr">type:</span> <span class="string">MOD</span></span><br><span class="line">     <span class="attr">props:</span></span><br><span class="line">       <span class="attr">sharding-count:</span> <span class="number">2</span></span><br></pre></td></tr></table></div></figure><p>2.创建对应的数据库以及表<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-36.png"  alt="upload successful">      <br>3.通过命令连接ShardingSphere-PROXY,并进行查询(直接通过Navicat进行相关操作还是会出现一些问题，可能还没兼容好)<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-37.png"  alt="upload successful">      <br>4.通过ShardingSphere-PROXY日志可以发现是通过读库read_ds进行查询<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-38.png"  alt="upload successful">      <br>5.插入操作<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-39.png"  alt="upload successful">      <br>6.通过ShardingSphere-PROXY日志可以发现是通过写库write_ds进行插入<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-40.png"  alt="upload successful">      </p><ul><li><strong>数据加密</strong><br><br>1.配置config-encrypt.yaml</li></ul>   <figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schemaName:</span> <span class="string">encrypt_db</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line"> <span class="attr">ds_0:</span></span><br><span class="line">   <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.60.88:3308/encrypt_ds?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">   <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">   <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">   <span class="attr">connectionTimeoutMilliseconds:</span> <span class="number">30000</span></span><br><span class="line">   <span class="attr">idleTimeoutMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">   <span class="attr">maxLifetimeMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">   <span class="attr">maxPoolSize:</span> <span class="number">50</span></span><br><span class="line">   <span class="attr">minPoolSize:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!ENCRYPT</span></span><br><span class="line"> <span class="attr">encryptors:</span></span><br><span class="line">   <span class="comment">#加密算法名称</span></span><br><span class="line">   <span class="attr">aes_encryptor:</span></span><br><span class="line">    <span class="comment">#加解密算法类型</span></span><br><span class="line">     <span class="attr">type:</span> <span class="string">AES</span></span><br><span class="line">     <span class="attr">props:</span></span><br><span class="line">       <span class="attr">aes-key-value:</span> <span class="string">123456abc</span></span><br><span class="line">   <span class="attr">md5_encryptor:</span></span><br><span class="line">     <span class="attr">type:</span> <span class="string">MD5</span></span><br><span class="line"> <span class="attr">tables:</span></span><br><span class="line">   <span class="attr">t_encrypt:</span></span><br><span class="line">     <span class="attr">columns:</span></span><br><span class="line">       <span class="comment">#加密字段</span></span><br><span class="line">       <span class="attr">number:</span></span><br><span class="line">         <span class="comment">#原文列名称</span></span><br><span class="line">         <span class="attr">plainColumn:</span> <span class="string">number</span></span><br><span class="line">         <span class="comment">#加密列名称</span></span><br><span class="line">         <span class="attr">cipherColumn:</span> <span class="string">number_cipher</span></span><br><span class="line">        <span class="comment">#加密算法名称</span></span><br><span class="line">         <span class="attr">encryptorName:</span> <span class="string">aes_encryptor</span></span><br></pre></td></tr></table></div></figure><p>2.插入一条测试数据<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-41.png"  alt="upload successful">      <br>3.自动生成加密列字段<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-42.png"  alt="upload successful">      </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从环境搭建</title>
      <link href="/2022/06/23/Mysql%E4%B8%BB%E4%BB%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/06/23/Mysql%E4%B8%BB%E4%BB%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;随着业务量增多，数据库难免会出现面临瓶颈的问题，当负载过重时，甚至会出现宕机的情况，造成严重后果。所以为了提前预防这种问题，这边考虑通过搭建mysql的主从架构来实现数据库的负载均衡和读写分离，并减少单台MySQL数据库服务器的压力。</p></blockquote><hr><ul><li><strong>主从模式的原理</strong><br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-24.png"  alt="upload successful">      <pre><code>实现过程：  1. master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时， 则将其改变写入binlog日志中；  2.slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/O Thread请求master二进制事件在读取 binlog 的内容的操作中，会对主库的 binlog 加锁，当binlog读取完成并发送给从库后解锁。   3.同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至 从节点本地的中继日志(relay log)中，从节点将启动SQL线程，从中继日志中读取二进制日志，在本 地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态， 等待下一次被唤醒。</code></pre></li><li><strong>主从复制的三种模式</strong><pre><code>1. 异步复制：slave通过IO线程拉取binlog，master无需关注是否有slave需要同步，只做自己的事情，整个复制过程都是异步完成的.2. 半同步复制（无损复制):master更新操作写入binlog之后会主动通知slave，slave接收到之后写入relay log 即可应答，master只要收到至少一个ack应答，则会提交事务，保证至少有一个从库跟master的数据是一致的，数据的安全性提高。MySQL 5.5版本之后引入了半同步复制功能，主从服务器必须安装半同步复制插件，才能开启该复制功能。如果等待超时，超过rpl_semi_sync_master_timeout参数设置时间（默认值为10000，表示10秒），则关闭半同步复制，并自动转换为异步复制模式。5.7版本之前因为等待ACK的点是Commit之后，此时Master已经完成数据变更，用户已经可以看到最新数据，当Binlog还未同步到Slave时，发生主从切换，那么此时从库是没有这个最新数据的，用户看到的是老数据。5.7新增了rpl_semi_sync_master_wait_point = AFTER_SYNC（默认）将等待ack的点放在提交事务前3. 组复制（MGR)基于传统异步复制和半同步复制的缺陷——数据的一致性问题无法保证，MySQL官方在5.7.17版本正式推出组复制（MySQL Group Replication，简称MGR）由若干个节点共同组成一个复制组，一个事务的提交，必须经过组内大多数节点（N / 2 + 1）决议并通过，才能得以提交。</code></pre>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-25.png"  alt="upload successful">      </li></ul><hr><ul><li><strong>搭建主从环境</strong><br><br>  <span class="exturl"><a class="exturl__link"   href="https://downloads.mysql.com/archives/community/"  target="_blank" rel="noopener">mysql下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>  以下教程以mysql版本5.7.39为准</li><li><strong>主库环境搭建</strong><ol><li>解压并在安装目录创建my.ini文件 </li></ol></li></ul><figure class="highlight ini"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line">端口号，默认是3306，同一个环境下不同的mysql实例端口号不能相同</span><br><span class="line"><span class="attr">port</span>=<span class="number">3307</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span> </span><br><span class="line">主库配置</span><br><span class="line"><span class="attr">server_id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log_bin</span>=master-bin</span><br><span class="line"><span class="attr">log_bin-index</span>=master-bin.index</span><br><span class="line"></span><br><span class="line"> 设置为自己MYSQL的安装目录</span><br><span class="line"><span class="attr">basedir</span>=D:/mysql/master</span><br><span class="line"> 设置为MYSQL的数据目录，data文件夹由mysql自动生成</span><br><span class="line"><span class="attr">datadir</span>=D:/mysql/master/data</span><br><span class="line"><span class="attr">port</span>=<span class="number">3307</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class="line"></span><br><span class="line"> 开启查询缓存</span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  2. 安装mysql服务<br><br>   &nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;进入安装目录的bin文件夹，以管理员的方式运行cmd<br>          执行初始化命令 其中–user参数为指定操作系统用户，可不加<br>              mysqld –initialize –console<br>          命令执行后会生成默认密码，这里需要记录默认密码<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-26.png"  alt="upload successful">      <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.安装mysql服务<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysqld –install master –defaults-file=”D:\mysql\master\my.ini”<br>         出现以下结果，则表示安装成功<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-27.png"  alt="upload successful">      <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.修改注册表<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按win+R，在弹框中输入regedit打开注册表，找到master服务，路径是HKEY_LOCAL_MACHINE–&gt;SYSTEM–&gt;CurrentControlSet–&gt;Services–&gt;master，修改ImagePath为D:\software\mysql\master\bin\mysqld –defaults-file=D:\software\mysql\master\my.ini master 复制代码 路径就对应自己安装的master数据库文件夹即可<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.启动mysql服务<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>net start master</code><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果出现以下错误，通过依次输入<code>tasklist| findstr &quot;mysql&quot;,taskkill/f /t /im mysqld.exe</code> <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6.进入mysql<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-P为刚才master中my.ini设置的端口号<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>mysql -u root -P3307 -p</code><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.重置密码<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>set password for root@localhost = password(&#39;123&#39;);</code></p><pre><code>注：如果忘记密码则在my.ini 中加入skip-grant-tables跳过校验并重启mysql服务，进入mysql后通过以下命令重置密码use mysqlupdate user set authentication_string=password(&quot;123456&quot;) where user=&quot;root&quot;</code></pre><ul><li><strong>从库环境搭建</strong><br><br>my.ini配置文件</li></ul><figure class="highlight ini"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3308</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">重要配置信息--从库配置，server_id也必须保持唯一 server_id=2</span><br><span class="line"><span class="attr">relay-log-index</span>=slave-relay-bin.index</span><br><span class="line"><span class="attr">relay-log</span>=slave-relay-bin</span><br><span class="line"></span><br><span class="line"> 设置为自己MYSQL的安装目录</span><br><span class="line"><span class="attr">basedir</span>=D:/mysql/slave</span><br><span class="line"> 设置为MYSQL的数据目录</span><br><span class="line"><span class="attr">datadir</span>=D:/mysql/slave/data</span><br><span class="line"><span class="attr">port</span>=<span class="number">3308</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class="line">开启查询缓存</span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;安装步骤跟主环境安装步骤一致，执行安装服务命令时需要修改服务名称，不可与主库服务master名称一致</p><ul><li><p><strong>从库环境搭建</strong><br></p><ol><li>登录主库获取相关信息，主要记录File和Position属性<pre><code>show master status;            </code></pre>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-28.png"  alt="upload successful">      </li><li>登录从库<br><br>配置主库关联信息，其中master_log_pos设置为主库当前对应的Position数值，首次同步时也可以直接设置为0，启动slave线程时会自动同步<br><br><code>change master to master_host=&#39;127.0.0.1&#39;,master_port=3307,master_log_file=&#39;master-bin.000004&#39;,master_log_pos=414;</code><br></li><li>启动I/O 线程和SQL线程<br><br><code>start slave user=&#39;root&#39; password=&#39;123456&#39;;</code><br><br> 其他命令：停止命令–stop slave; 重置slave配置–reset slave all;<br></li><li>查看从库配置信息<br><br><code>show slave status\G;</code><br><br>注：以下配置必须开启 <br> <ul><li>slave_io_running: YES  负责与主机的io通信    </li><li>slave_sql_running:YES 负责自己的slave mysql进程<br><br>slave_io_runnung可以检查检查log文件或者pos位置跟主库信息是否对应，<br>slave_sql_running可通过命令1.stop slave sql_thread;2.start slave sql_thread; 重启线程</li></ul></li></ol></li><li><p><strong>配置半同步模式</strong><br></p><ol><li><p>主库从库安装插件</p><ul><li>主:<code>install plugin rpl_semi_sync_master soname &#39;semisync_master.dll&#39;;</code></li><li>从:<code>install plugin rpl_semi_sync_slave soname &#39;semisync_slave.dll&#39;;</code></li></ul></li><li><p>查看插件安装状态<br><br> <code>show plugins;</code></p></li><li><p>开启半同步<br></p><ul><li>主：<code>set global rpl_semi_sync_master_enabled=1;</code></li><li>从：<code>set global rpl_semi_sync_slave_enabled=1;</code></li></ul><p>开启后从库重启IO线程更新配置</p><pre><code>stop slave io_thread;     start slave io_thread;</code></pre><p>也可以在配置文件my.ini中直接加入</p><ul><li><p>主：<code>rpl_semi_sync_master_enabled=1</code></p></li><li><p>从：<code>rpl_semi_sync_slave_enabled=1</code></p></li></ul></li><li><p>查看相关设置参数：</p><p><code>show global variables like &#39;%rpl_semi%&#39;;</code></p><pre><code>相关配置说明：rpl_semi_sync_master_enabled：主库启用半同步rpl_semi_sync_slave_enabled：从库启用半同步rpl_semi_sync_master_timeout：半同步超时时间，即从库在超过这个时间无应答后，改为异步同步(可以通过关闭从库复制，进行测试)rpl_semi_sync_master_wait_for_slave_count ：多个从库的环境下，只等待一个从库应答(当状态变量rpl_semi_sync_master_clients中的值小于rpl_semi_sync_master_wait_for_slave_count时,改为异步同步)rpl_semi_sync_master_wait_point：半主从同步模式，5.7默认AFTER_SYNC</code></pre></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jTessBoxEditor训练Tesseract自定义识别库</title>
      <link href="/2022/06/05/jTessBoxEditor%E8%AE%AD%E7%BB%83Tesseract%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E5%BA%93/"/>
      <url>/2022/06/05/jTessBoxEditor%E8%AE%AD%E7%BB%83Tesseract%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;在某些场景下需要识别一些指定的内容，这种情况Tesseract无法保证比较高的识别率，这时候可以通过jTessBoxEditor自定义识别内容，提高图片的文字识别率。</p></blockquote><hr><ol><li><p><a href="https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/" target="_blank" rel="noopener"><strong>安装jTessBoxEditor</strong></a></p></li><li><p><strong>获取采样文本</strong></p><ul><li>需要将文件全部转换为tif格式  <span class="exturl"><a class="exturl__link"   href="https://onlineconvertfree.com/zh/convert-format/png-to-tif/"  target="_blank" rel="noopener">在线转换地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>通过点击Tools下的Merge TIFF合并文件<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-17.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-18.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-19.png"  alt="upload successful">      </li><li>生成的文件格式必须按照：[lang].[fontname].exp[num].tif<br>lang是语言，fontname是字体，num为自定义数字</li></ul></li><li><p><strong>使用Tesseract生成.box文件</strong><br><br> <code>tesseract num.font.exp3.tif num.font.exp3 -l chi_sim --psm 6 batch.nochop makebox</code></p></li><li><p><strong>通过jTessBoxEditor矫正.box文件的错误</strong><br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-20.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-21.png"  alt="upload successful">      <br>调整后:<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-22.png"  alt="upload successful">      </p></li><li><p><strong>生成font_properties文件：（该文件没有后缀名）</strong><br></p><ul><li>新建一个名为font_properties的文本文件，输入内容 <code>font 0 0 0 0 0</code> 表示字体font的粗体、倾斜等共计5个属性。这里的“font”必须与“num.font.exp3.box”中的“font”名称一致。 </li></ul></li><li><p><strong>使用tesseract生成.tr训练文件</strong><br><br><code>tesseract num.font.exp3.tif num.font.exp3 nobatch box.train</code><br><br>如果出现以下错误，需要再通过步骤4进行调整:<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-23.png"  alt="upload successful">      </p></li><li><p><strong>生成字符集</strong><br><br><code>unicharset_extractor num.font.exp0.box</code></p></li><li><p><strong>生成shape文件</strong><br><br><code>shapeclustering -F font_properties -U unicharset -O num.unicharset num.font.exp0.tr</code></p></li><li><p><strong>生成聚字符特征文件</strong><br><br><code>mftraining -F font_properties -U unicharset -O num.unicharset num.font.exp0.tr</code></p></li><li><p><strong>生成字符正常化特征文件</strong><br><br><code>cntraining num.font.exp0.tr</code></p></li><li><p><strong>文件重命名</strong><br><br>重新命名inttemp、pffmtable、shapetable和normproto这四个文件的名字为[lang].xxx。</p><p>   ren shapetable num.shapetable<br>   ren normproto num.normprotor<br>   ren inttemp num.inttemp<br>   ren pffmtable num.pffmtable</p></li><li><p><strong>合并训练文件</strong><br><br> 执行下面命令，会生成num.traineddata文件。<br><br>   <code>combine_tessdata num.</code></p></li></ol><hr><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;如果我们想在原来的识别库上更新，则需要使用LSTM训练方式<br></p></blockquote><ol><li>准备好训练文本以及原.traineddata文件(需要来自官方的tessdata_best仓库，否则合并会提示异常)</li><li>生成对应的.box文件<br><br><code>tesseract test.normal.exp0.tif test.normal.exp0 -l chi_sim --psm 6 batch.nochop makebox</code>   <ul><li>test.normal.exp0.tif 上一步生成的.tif 格式的文件</li><li>test.normal.exp0 指明要生成的.box文件的名称</li><li>-l chi_sim 表示用到的语言</li><li>–psm 6 表示采用的识别模式，通常6 效果会好些</li></ul></li><li>.tif和.box文件，生成.lstmf文件用于lstm训练,生成lstmf文件<br><code>tesseract test.normal.exp0.tif test.normal.exp0 -l chi_sim --psm 6 lstm.train</code></li><li>从已有的.traineddata文件中提取.lstm文件<br><code>combine_tessdata -e chi_sim.traineddata chi_sim.lstm</code></li><li>创建test.training_files.txt文件，里边的内容为.lstmf文件的路径地址</li><li>进行训练,训练结束后，在output文件夹中会生成i一个output_checkpoint文件和多个类似output0.012_3.checkpoint的.checkpoint文件<br><br>  `lstmtraining –model_output=”C:\Users\cj\Desktop\output” </li></ol><p>–continue_from=”C:\Users\cj\Desktop\chi_sim.lstm”<br>–train_listfile=”C:\Users\cj\Desktop\chi_sim.traning_files.txt”<br>–traineddata=”C:\Users\cj\Desktop\chi_sim.traineddata”<br>–debug_interval -1<br>–max_iterations 2000`</p><p>  <strong>参数意义:</strong></p><ul><li>–model_output 模型训练输出的路径</li><li>–continue_from 训练从哪里开始，这里指定从中提取的.lstm文件。也可从之前训练生成的阶段文件output_checkpoint开始。</li><li>–train_listfile 指定上一步创建的test.training_files.txt文件路径</li><li>–traineddata 第1步中下载的.traineddata文件的路径</li><li>–debug_interval 当值为-1时，训练结束，会显示训练的一些结果参数</li><li>–max_iterations 指明训练遍历次数<br></li></ul><p> 7.将checkpoint文件和.traineddata文件合并成新的.traineddata文件<br><br>    <code>lstmtraining --stop_training --continue_from=&quot;C:\Users\cj\Desktop\output\output_checkpoint&quot;--traineddata=&quot;C:\Users\cj\Desktop\chi_sim.traineddata&quot; --model_output=&quot;C:\Users\cj\Desktop\nml.traineddata&quot;</code></p><p>  <strong>参数意义:</strong></p><ul><li>–stop_training 默认要有</li><li>–continue_from 上一步生成的output_checkpoint文件路径</li><li>–traineddata 第1步中下载的已有.traineddata文件的路径</li><li>–model_output nml.traineddata 输出的路径</li></ul>]]></content>
      
      
      <categories>
          
          <category> OCR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 识别训练软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tesseract安装教程</title>
      <link href="/2022/05/16/Tesseract%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2022/05/16/Tesseract%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;图文识别是我们工作中经常会使用的功能，目前市面上也存在许多相关的软件，最近遇到需要在公司的框架中集成这样的一个功能，通过几款开源的软件的对比，最后选择了谷歌的Tesseract.</p></blockquote><hr><ol><li><p><a href="https://digi.bib.uni-mannheim.de/tesseract/" target="_blank" rel="noopener"><strong>Tesseract安装包下载</strong></a><br>推荐下载该版本，最新版本文字识别效果不太理想<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-11.png"  alt="upload successful">      </p></li><li><p><a href="https://digi.bib.uni-mannheim.de/tesseract/tessdata_fast/" target="_blank" rel="noopener"><strong>识别库下载</strong></a>  </p><ul><li>下载所需要的识别库文件，如果只用来识别中文的话，只需下载chi_sim.traineddata和chi_sim_vert.traineddata文件就行</li><li>安装完tesseract后，将对应的识别库文件放置识别库文件夹tessdata下，默认路径为(C:\Program Files\Tesseract-OCR\tessdata)</li></ul></li><li><p><strong>设置环境变量</strong></p><ul><li>在系统变量的path中加入Tesseract的安装路径<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-12.png"  alt="upload successful">      </li><li>新增系统变量TESSDATA_PREFIX，并设置tessdata的文件夹所在路径<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-13.png"  alt="upload successful">      </li></ul></li><li><p><strong>验证安装环境</strong></p><ul><li><p>tesseract -v,显示如图结果则安装成功<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-14.png"  alt="upload successful">      </p></li><li><p>测试图文识别</p><p>tesseract test.png result -l chi_sim</p><p>tesseract 【文件名】【生成的txt文件】 -l 【识别语言】</p><p>参考命令：tesseract imagename outputbase [-l lang] [–oem ocrenginemode] [–psm pagesegmode] [configfiles…]</p></li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-15.png"  alt="upload successful">      <br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-16.png"  alt="upload successful">      </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> OCR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图文识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos动态服务配置</title>
      <link href="/2021/10/15/Nacos%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/10/15/Nacos%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;由于rabbitmq迁移对许多服务可能会造成影响，为了减少迁移时间，准备使用nacos动态配置服务的相关配置，改变配置无需手动重启服务就可更新。</p><hr><p><strong>Nacos是什么?</strong></p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您实现动态服务发现、服务配置管理、服务及流量管理。<br>&nbsp;&nbsp;&nbsp;&nbsp;Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构(例如微服务范式、云原生范式)的服务基础设施.<br><strong>官方说明文档</strong>:<span class="exturl"><a class="exturl__link"   href="https://nacos.io/zh-cn/docs/what-is-nacos.html"  target="_blank" rel="noopener">Nacos</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><ul><li>这次主要是使用Nacos的动态服务配置管理功能，官方也提供了多种语言的sdk,这里主要讲述golang和java版本的使用方式，以动态更新rabbitmq连接为例。</li></ul><p><strong>golang版本</strong><br> <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcmConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Endpoint    <span class="keyword">string</span></span><br><span class="line">NamespaceID <span class="keyword">string</span></span><br><span class="line">AccessKey   <span class="keyword">string</span></span><br><span class="line">SecretKey   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AcmClient *config_client.IConfigClient</span><br><span class="line"></span><br><span class="line"><span class="comment">//InitAcm 初始化acm</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitAcm</span><span class="params">(acmConfig AcmConfig)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">acmClient, err := clients.CreateConfigClient(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"clientConfig"</span>: constant.ClientConfig&#123;</span><br><span class="line">Endpoint:    acmConfig.Endpoint,</span><br><span class="line">NamespaceId: acmConfig.NamespaceID,</span><br><span class="line">AccessKey:   acmConfig.AccessKey,</span><br><span class="line">SecretKey:   acmConfig.SecretKey,</span><br><span class="line">TimeoutMs:   <span class="number">5</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">AcmClient = &amp;acmClient</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GetAcmContent 获取配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAcmContent</span><span class="params">(dataID, group <span class="keyword">string</span>)</span> <span class="params">(content <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">acmClient := *AcmClient</span><br><span class="line"><span class="comment">// 获取配置</span></span><br><span class="line">content, err = acmClient.GetConfig(vo.ConfigParam&#123;</span><br><span class="line">DataId: dataID,</span><br><span class="line">Group:  group&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> content, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitAcmConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//初始化acm</span></span><br><span class="line">err := InitAcm(setting.JsonConfig.AcmConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(<span class="string">"获取连接acm错误"</span>, zap.String(<span class="string">"错误"</span>, err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拉取远端最新配置</span></span><br><span class="line">err = config.GetAcmConfig(config.RabbitConfigDataID, config.RabbitConfigGroupID, &amp;setting.JsonConfig.JsonConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(<span class="string">"拉取远端acm配置失败"</span>, zap.String(<span class="string">"错误"</span>, err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">acmClient := *nacos.AcmClient</span><br><span class="line">   <span class="comment">//监听远端配置改动</span></span><br><span class="line">acmClient.ListenConfig(vo.ConfigParam&#123;</span><br><span class="line">DataId: config.RabbitConfigDataID,</span><br><span class="line">Group:  config.RabbitConfigGroupID,</span><br><span class="line">OnChange: <span class="function"><span class="keyword">func</span><span class="params">(namespace, group, dataId, data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(data), &amp;setting.JsonConfig.Rabbit)</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">rabbit.ProducerConnection.InitRabbitMQProducer(<span class="literal">true</span>, setting.JsonConfig.Rabbit)</span><br><span class="line">&#125;)</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ConsumerConnection.InitRabbitMQConsumer(<span class="literal">true</span>, setting.JsonConfig.Rabbit)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></p><p><strong>java版本</strong><br> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">//在Application中初始化 阿里云acm 连接</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliAcmConfig.endPoint&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String endPoint;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliAcmConfig.nameSpace&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nameSpace;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliAcmConfig.accessKey&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliAcmConfig.secretKey&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigService <span class="title">createConfigService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(PropertyKeyConst.ENDPOINT, endPoint);</span><br><span class="line">        properties.put(PropertyKeyConst.NAMESPACE, nameSpace);</span><br><span class="line">        properties.put(PropertyKeyConst.ACCESS_KEY, accessKey);</span><br><span class="line">        properties.put(PropertyKeyConst.SECRET_KEY, secretKey);</span><br><span class="line">        ConfigService configService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            configService = NacosFactory.createConfigService(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> configService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DependsOn</span>(<span class="string">"acmConfig"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigService configService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitProperties rabbitProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host=rabbitProperties.getHost();</span><br><span class="line">        Integer port=rabbitProperties.getPort();</span><br><span class="line">        String username=rabbitProperties.getUsername();</span><br><span class="line">        String password=rabbitProperties.getPassword();</span><br><span class="line">        CachingConnectionFactory connectionFactory = <span class="keyword">new</span> CachingConnectionFactory();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//默认先去查询acm配置</span></span><br><span class="line">            String rabbitConfig = configService.getConfig(SoeDefine.RABBIT_CONFIG_DATA_ID, SoeDefine.RABBIT_CONFIG_GROUP, <span class="number">1</span>);</span><br><span class="line">            connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">            connectionFactory.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);</span><br><span class="line">            connectionFactory.setPublisherReturns(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(rabbitConfig) &amp;&amp; !rabbitConfig.equals(<span class="string">"&#123;&#125;"</span>)) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = JSONUtil.parseObj(rabbitConfig).toBean(Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                host = Convert.toStr(map.get(<span class="string">"Host"</span>));</span><br><span class="line">                port = Convert.toInt(map.get(<span class="string">"Port"</span>));</span><br><span class="line">                password = Convert.toStr(map.get(<span class="string">"Password"</span>));</span><br><span class="line">                username = Convert.toStr(map.get(<span class="string">"Username"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connectionFactory.setHost(host);</span><br><span class="line">            connectionFactory.setPort(port);</span><br><span class="line">            connectionFactory.setPassword(username);</span><br><span class="line">            connectionFactory.setUsername(password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建初始化RabbitAdmin对象,自动创建队列,交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitAdmin <span class="title">rabbitAdmin</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitAdmin rabbitAdmin = <span class="keyword">new</span> RabbitAdmin(connectionFactory);</span><br><span class="line">        <span class="comment">// 只有设置为 true，spring 才会加载 RabbitAdmin 这个类</span></span><br><span class="line">        rabbitAdmin.setAutoStartup(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RabbitTemplate template = <span class="keyword">new</span> RabbitTemplate(connectionFactory());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></p>    <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p>这里java版本是利用spring cloud中的注解重启项目实现rabbitMQ连接配置的更新，但是当关联的服务比较多时，同时重启可能会对服务器性能有一定的影响，之前尝试过动态创建rabbitTemplate更新生产者配置，暂时还未找到动态去更新消费者连接配置的方法。</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-RabbitMQ 连接以及重连机制</title>
      <link href="/2021/09/12/Golang-RabbitMQ%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/09/12/Golang-RabbitMQ%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;随着客户数量的增多，最近需要将RabbitMQ服务单独迁移到另一个服务器，减少对业务服务器的影响，在整理相关服务关系文档的时候，发现Golang项目里RabbitMQ重连机制还不够完善，并且代码有许多重复创建连接问题，当RabbitMQ连接断开或者是容器重启时还会影响服务的正常运行，于是准备将相关重连代码进行改进并提取公共使用方法。</p><hr><p><strong>一、生产者的创建以及发送</strong></p> <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rabbit <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="keyword">string</span></span><br><span class="line">Port     <span class="keyword">int</span></span><br><span class="line">Username <span class="keyword">string</span></span><br><span class="line">Password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> RabbitConsumerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//交换机</span></span><br><span class="line">ExchangeName <span class="keyword">string</span></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line">QueueName <span class="keyword">string</span></span><br><span class="line"><span class="comment">//模式</span></span><br><span class="line">ExchangeType <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Rabbit连接</span></span><br><span class="line"><span class="keyword">type</span> Connection <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//连接</span></span><br><span class="line">Conn *amqp.Connection</span><br><span class="line"><span class="comment">//通道</span></span><br><span class="line">Ch *amqp.Channel</span><br><span class="line"><span class="comment">//连接异常结束</span></span><br><span class="line">ConnNotifyClose <span class="keyword">chan</span> *amqp.Error</span><br><span class="line"><span class="comment">//通道异常接收</span></span><br><span class="line">ChNotifyClose <span class="keyword">chan</span> *amqp.Error</span><br><span class="line">URL           <span class="keyword">string</span></span><br><span class="line">Rabbit         Rabbit</span><br><span class="line"><span class="comment">//用于关闭进程</span></span><br><span class="line">CloseProcess <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//消费者信息</span></span><br><span class="line">RabbitConsumerList []RabbitConsumerInfo</span><br><span class="line"><span class="comment">//生产者信息</span></span><br><span class="line">RabbitProducerMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"><span class="comment">//自定义消费者处理函数</span></span><br><span class="line">ConsumeHandle <span class="function"><span class="keyword">func</span><span class="params">(&lt;-<span class="keyword">chan</span> amqp.Delivery)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">CancelOrderDelayQueue = <span class="string">"soesoft.cancel.order.delay.queue"</span></span><br><span class="line">DelayExchange         = <span class="string">"soesoft.delay.exchange"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DLXMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">QueueName   <span class="keyword">string</span> <span class="string">`json:"queueName"`</span></span><br><span class="line">Content     <span class="keyword">string</span> <span class="string">`json:"content"`</span></span><br><span class="line">NotifyCount <span class="keyword">int</span>    <span class="string">`json:"notifyCount"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dial</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(*amqp.Connection, error)</span></span> &#123;</span><br><span class="line">conn, err := amqp.Dial(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProducerReConnect 生产者重连</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Connection)</span> <span class="title">ProducerReConnect</span><span class="params">()</span></span> &#123;</span><br><span class="line">closeTag:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">c.ConnNotifyClose = c.Conn.NotifyClose(<span class="built_in">make</span>(<span class="keyword">chan</span> *amqp.Error))</span><br><span class="line">c.ChNotifyClose = c.Ch.NotifyClose(<span class="built_in">make</span>(<span class="keyword">chan</span> *amqp.Error))</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> connErr, _ := &lt;-c.ConnNotifyClose:</span><br><span class="line"><span class="keyword">if</span> connErr != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbitMQ连接异常:%s"</span>, connErr.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断连接是否关闭</span></span><br><span class="line"><span class="keyword">if</span> !c.Conn.IsClosed() &#123;</span><br><span class="line"><span class="keyword">if</span> err := c.Conn.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbit连接关闭异常:%s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新连接</span></span><br><span class="line"><span class="keyword">if</span> conn, err := dial(c.URL); err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbit重连失败:%s"</span>, err.Error()))</span><br><span class="line">_, isConnChannelOpen := &lt;-c.ConnNotifyClose</span><br><span class="line"><span class="keyword">if</span> isConnChannelOpen &#123;</span><br><span class="line"><span class="built_in">close</span>(c.ConnNotifyClose)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//connection关闭时会自动关闭channel</span></span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.InitRabbitMQProducer(<span class="literal">false</span>, c.Rabbit) &#125;)</span><br><span class="line"><span class="comment">//结束子进程</span></span><br><span class="line"><span class="keyword">break</span> closeTag</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//连接成功</span></span><br><span class="line">c.Ch, _ = conn.Channel()</span><br><span class="line">c.Conn = conn</span><br><span class="line">soelog.Logger.Info(<span class="string">"rabbitMQ重连成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IMPORTANT: 必须清空 Notify，否则死连接不会释放</span></span><br><span class="line"><span class="keyword">for</span> err := <span class="keyword">range</span> c.ConnNotifyClose &#123;</span><br><span class="line"><span class="built_in">println</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> chErr, _ := &lt;-c.ChNotifyClose:</span><br><span class="line"><span class="keyword">if</span> chErr != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbitMQ通道连接关闭:%s"</span>, chErr.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重新打开一个并发服务器通道来处理消息</span></span><br><span class="line"><span class="keyword">if</span> !c.Conn.IsClosed() &#123;</span><br><span class="line">ch, err := c.Conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbitMQ channel重连失败:%s"</span>, err.Error()))</span><br><span class="line">c.ChNotifyClose &lt;- chErr</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">soelog.Logger.Info(<span class="string">"rabbitMQ通道重新创建成功"</span>)</span><br><span class="line">c.Ch = ch</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">_, isConnChannelOpen := &lt;-c.ConnNotifyClose</span><br><span class="line"><span class="keyword">if</span> isConnChannelOpen &#123;</span><br><span class="line"><span class="built_in">close</span>(c.ConnNotifyClose)</span><br><span class="line">&#125;</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.InitRabbitMQProducer(<span class="literal">false</span>, c.Rabbit) &#125;)</span><br><span class="line"><span class="keyword">break</span> closeTag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> err := <span class="keyword">range</span> c.ChNotifyClose &#123;</span><br><span class="line"><span class="built_in">println</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-c.CloseProcess:</span><br><span class="line"><span class="keyword">break</span> closeTag</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">soelog.Logger.Info(<span class="string">"结束旧生产者进程"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//InitRabbitMQProducer 初始化生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Connection)</span> <span class="title">InitRabbitMQProducer</span><span class="params">(isClose <span class="keyword">bool</span>, rabbitMQConfig config.Rabbit)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> isClose &#123;</span><br><span class="line">c.CloseProcess &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">c.Rabbit = rabbitMQConfig</span><br><span class="line">url := <span class="string">"amqp://"</span> + c.Rabbit.Username + <span class="string">":"</span> + c.Rabbit.Password + <span class="string">"@"</span> + c.Rabbit.Host + <span class="string">":"</span> + cast.ToString(c.Rabbit.Port) + <span class="string">"/"</span></span><br><span class="line">conn, err := dial(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbitMQ连接异常:%s"</span>, err.Error()))</span><br><span class="line">soelog.Logger.Info(<span class="string">"休息5S,开始重连rabbitMQ生产者"</span>)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.InitRabbitMQProducer(<span class="literal">false</span>, c.Rabbit) &#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">soelog.Logger.Info(<span class="string">"rabbitMQ生产者连接成功"</span>)</span><br><span class="line"><span class="comment">// 打开一个并发服务器通道来处理消息</span></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbitMQ打开通道异常:%s"</span>, err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line">c.Conn = conn</span><br><span class="line">c.URL = url</span><br><span class="line">c.Ch = ch</span><br><span class="line">c.CloseProcess = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line">c.ProducerReConnect()</span><br><span class="line">soelog.Logger.Info(<span class="string">"结束rabbitMQ旧生产者"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Connection)</span> <span class="title">SendMessage</span><span class="params">(body []<span class="keyword">byte</span>, queueName <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.RabbitProducerMap == <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(<span class="string">"未初始化生产者信息"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> queueName == <span class="string">""</span> &#123;</span><br><span class="line">soelog.Logger.Error(<span class="string">"队列名称不能为空"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">exchangeName := c.RabbitProducerMap[queueName]</span><br><span class="line"><span class="keyword">if</span> exchangeName == <span class="string">""</span> &#123;</span><br><span class="line">soelog.Logger.Error(<span class="string">"交换机名称不能为空"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">m := DLXMessage&#123;</span><br><span class="line">QueueName:   queueName,</span><br><span class="line">Content:     <span class="keyword">string</span>(body),</span><br><span class="line">NotifyCount: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">body, _ = json.Marshal(m)</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">err := c.Ch.Publish(</span><br><span class="line">exchangeName, <span class="comment">// exchange 默认模式，exchange为空</span></span><br><span class="line">queueName,    <span class="comment">// routing key 默认模式路由到同名队列，即是task_queue</span></span><br><span class="line"><span class="literal">false</span>,        <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line"><span class="comment">// 持久性的发布，因为队列被声明为持久的，发布消息必须加上这个（可能不用），但消息还是可能会丢，如消息到缓存但MQ挂了来不及持久化。</span></span><br><span class="line">DeliveryMode: amqp.Persistent,</span><br><span class="line">ContentType:  <span class="string">"text/plain"</span>,</span><br><span class="line">Body:         []<span class="keyword">byte</span>(body),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(<span class="string">"rabbitMQ 发送消息失败:"</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>二、消费者的创建以及监听</strong></p> <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//InitRabbitMQConsumer 初始化消费者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Connection)</span> <span class="title">InitRabbitMQConsumer</span><span class="params">(isClose <span class="keyword">bool</span>, rabbitMQConfig config.Rabbit)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> isClose &#123;</span><br><span class="line">c.CloseProcess &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">c.Rabbit = rabbitMQConfig</span><br><span class="line">url := <span class="string">"amqp://"</span> + c.Rabbit.Username + <span class="string">":"</span> + c.Rabbit.Password + <span class="string">"@"</span> + c.Rabbit.Host + <span class="string">":"</span> + cast.ToString(c.Rabbit.Port) + <span class="string">"/"</span></span><br><span class="line"><span class="comment">//连接rabbit</span></span><br><span class="line">conn, err := amqp.Dial(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbit连接异常:%s"</span>, err.Error()))</span><br><span class="line">soelog.Logger.Info(<span class="string">"休息5S,开始重连rabbitMq消费者"</span>)</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.InitRabbitMQConsumer(<span class="literal">false</span>, c.Rabbit) &#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c.Conn = conn</span><br><span class="line">err = c.CreateRabbitMQConsumer()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.URL = url</span><br><span class="line">c.CloseProcess = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line">c.ConsumerReConnect()</span><br><span class="line">soelog.Logger.Info(<span class="string">"结束消费者旧主进程"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Connection)</span> <span class="title">CreateRabbitMQConsumer</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(c.RabbitConsumerList) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"消费者信息不能为空"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> c.RabbitConsumerList &#123;</span><br><span class="line"><span class="comment">//创建一个通道</span></span><br><span class="line">c.Ch, err = c.Conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(fmt.Sprintf(<span class="string">"MQ %s:%s"</span>, <span class="string">"打开Rabbit通道失败"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = c.Ch.ExchangeDeclare(</span><br><span class="line">value.ExchangeName,</span><br><span class="line">value.ExchangeType,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(fmt.Sprintf(<span class="string">"交换机初始化失败,交换机名称:%s,错误:%s"</span>, value.ExchangeName, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> queue amqp.Queue</span><br><span class="line">queue, err = c.Ch.QueueDeclare(</span><br><span class="line">value.QueueName,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"队列初始化失败,队列名称:%s,错误: %s"</span>, value.QueueName, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">soelog.Logger.Info(fmt.Sprintf(<span class="string">"declared Queue (%q %d messages, %d consumers), binding to Exchange (key %q)"</span>,</span><br><span class="line">queue.Name, queue.Messages, queue.Consumers, queue.Name))</span><br><span class="line"><span class="comment">// 绑定队列</span></span><br><span class="line">err = c.Ch.QueueBind(value.QueueName, value.QueueName, value.ExchangeName, <span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(fmt.Sprintf(<span class="string">"MQ %s:%s"</span>, <span class="string">"绑定队列失败"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绑定消费者</span></span><br><span class="line">messages := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> amqp.Delivery)</span><br><span class="line">messages, err = c.Ch.Consume(value.QueueName, <span class="string">""</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(fmt.Sprintf(<span class="string">"MQ %s:%s"</span>, <span class="string">"创建消费者失败"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.ConsumeHandle(messages)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConsumerReConnect 消费者重连</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Connection)</span> <span class="title">ConsumerReConnect</span><span class="params">()</span></span> &#123;</span><br><span class="line">closeTag:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">c.ConnNotifyClose = c.Conn.NotifyClose(<span class="built_in">make</span>(<span class="keyword">chan</span> *amqp.Error))</span><br><span class="line">c.ChNotifyClose = c.Ch.NotifyClose(<span class="built_in">make</span>(<span class="keyword">chan</span> *amqp.Error))</span><br><span class="line"><span class="keyword">var</span> err *amqp.Error</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err, _ = &lt;-c.ConnNotifyClose:</span><br><span class="line"><span class="keyword">case</span> err, _ = &lt;-c.ChNotifyClose:</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbit消费者连接异常:%s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断连接是否关闭</span></span><br><span class="line"><span class="keyword">if</span> !c.Conn.IsClosed() &#123;</span><br><span class="line"><span class="keyword">if</span> err := c.Conn.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"rabbit连接关闭异常:%s"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_, isConnChannelOpen := &lt;-c.ConnNotifyClose</span><br><span class="line"><span class="keyword">if</span> isConnChannelOpen &#123;</span><br><span class="line"><span class="built_in">close</span>(c.ConnNotifyClose)</span><br><span class="line">&#125;</span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.InitRabbitMQConsumer(<span class="literal">false</span>, c.Rabbit)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">break</span> closeTag</span><br><span class="line"><span class="keyword">case</span> &lt;-c.CloseProcess:</span><br><span class="line"><span class="keyword">break</span> closeTag</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">soelog.Logger.Info(<span class="string">"结束消费者旧进程"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 延迟队列</title>
      <link href="/2021/08/20/RabbitMQ-%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
      <url>/2021/08/20/RabbitMQ-%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;之前通过redis自带的过期事件监听做了一个简单的订单延迟队列，但是发现当消息量上来时存在一定的延迟性，并且消息不方便处理，于是准备使用rabbit做一个公共的延迟队列，便于其他服务调用。</p><hr><p><strong>RabbitMQ设置TTL(过期时间)通常有两种方式</strong></p><ul><li>针对Queue设置x-expires</li><li>针对Message设置 x-message-ttl</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;由于后期业务需要满足客户可以自主设置订单过期时间，为了这个延迟队列设置过期时间更加通用灵活，决定采用第二种设置message的过期时间方式。</p><p>创建死信队列以及消息的发送<br> <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//BindCancelOrderQueue 绑定交换器和队列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BindCancelOrderQueue</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://"</span> + setting.JsonConfig.Rabbit.Username + <span class="string">":"</span> + setting.JsonConfig.Rabbit.Password + <span class="string">"@"</span> + setting.JsonConfig.Rabbit.Host + <span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开一个并发服务器通道来处理消息</span></span><br><span class="line">thisCh, err := conn.Channel()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">ch = thisCh</span><br><span class="line"><span class="comment">//申明一个交换器</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line">DefaultExchange,</span><br><span class="line">ExchangeType,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 申明一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line">CancelOrderQueue, </span><br><span class="line"><span class="literal">true</span>,             </span><br><span class="line"><span class="literal">false</span>,            </span><br><span class="line"><span class="literal">false</span>,            </span><br><span class="line"><span class="literal">false</span>,           </span><br><span class="line"><span class="literal">nil</span>,             </span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">authQ = &amp;q</span><br><span class="line"><span class="comment">//绑定队列</span></span><br><span class="line">err = ch.QueueBind(CancelOrderQueue, CancelOrderQueue, DefaultExchange, <span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明死信队列</span></span><br><span class="line">_, err = ch.QueueDeclare(</span><br><span class="line">CancelOrderDelayQueue,</span><br><span class="line"><span class="literal">true</span>,                  </span><br><span class="line"><span class="literal">false</span>,                 </span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Table&#123;</span><br><span class="line"><span class="comment">//当消息过期时把消息发送到logs这个交换器</span></span><br><span class="line"><span class="string">"x-dead-letter-exchange"</span>:    DefaultExchange,</span><br><span class="line"><span class="string">"x-dead-letter-routing-key"</span>: CancelOrderQueue,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SendAutoCancelOrderMessage 发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendAutoCancelOrderMessage</span><span class="params">(body []<span class="keyword">byte</span>, autoCancelTime <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">m := DLXMessage&#123;</span><br><span class="line">QueueName:   CancelOrderDelayQueue,</span><br><span class="line">Content:     <span class="keyword">string</span>(body),</span><br><span class="line">NotifyCount: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">body, _ = json.Marshal(m)</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">err := ch.Publish(</span><br><span class="line"><span class="string">""</span>,                    </span><br><span class="line">CancelOrderDelayQueue, </span><br><span class="line"><span class="literal">false</span>,                 </span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">DeliveryMode: amqp.Persistent,</span><br><span class="line">ContentType:  <span class="string">"text/plain"</span>,</span><br><span class="line">Body:         []<span class="keyword">byte</span>(body),</span><br><span class="line"><span class="comment">//过期时间</span></span><br><span class="line">Expiration: strconv.Itoa(autoCancelTime * <span class="number">60</span> * <span class="number">1000</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></p><p> &nbsp;&nbsp;&nbsp;&nbsp;当时以为成功地解决了之前的问题，但是测试时还是发现了一些问题。当前消息前面有消息堆积时，即使该条消息过期了，还是不会被马上丢弃，直至前面堆积的所有消息过期才能被删除，如果消息不能在设置的TTL时间及时死亡，就无法设计成一个通用的延时队列。</p><hr><p> 通过查找相关资料，发现了可以通过rabbit插件(rabbitmq_delayed_message_exchange)解决该问题。<br> 插件地址:<span class="exturl"><a class="exturl__link"   href="https://www.rabbitmq.com/community-plugins.html"  target="_blank" rel="noopener">Rabbit Plugin</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br> 一、根据rabbit版本下载对应插件<br> 二、将插件放到raabit的plugin目录下<br> docker cp /mydata/rabbitmq/rabbitmq_delayed_message_exchange-3.8.0.ez COUNTER_ID:/plugins<br> 三、激活插件<br> 进入容器内部<br> docker exec -it rabbitmq bash<br> cd plugins<br> rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br> 相关代码<br>  <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CustomExchange <span class="title">customExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(MQConstant.DELAY_EXCHANGE, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">cancelOrderDelayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(MQConstant.CANCEL_ORDER_DELAY_QUEUE, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Binding <span class="title">cancelOrderDelayQueueBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BindingBuilder.bind(cancelOrderDelayQueue()).to(customExchange()).with(MQConstant.CANCEL_ORDER_DELAY_QUEUE).noargs();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure></p><pre><code><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//GO</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">SendAutoCancelOrderMessage</span><span class="params">(body []<span class="keyword">byte</span>, autoCancelTime <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">m := DLXMessage&#123;</span><br><span class="line">QueueName:   CancelOrderDelayQueue,</span><br><span class="line">Content:     <span class="keyword">string</span>(body),</span><br><span class="line">NotifyCount: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">body, _ = json.Marshal(m)</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">err := ch.Publish(</span><br><span class="line">DelayExchange,                    </span><br><span class="line">CancelOrderDelayQueue, </span><br><span class="line"><span class="literal">false</span>,                 </span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">DeliveryMode: amqp.Persistent,</span><br><span class="line">ContentType:  <span class="string">"text/plain"</span>,</span><br><span class="line">Body:         []<span class="keyword">byte</span>(body),</span><br><span class="line"><span class="comment">//过期时间</span></span><br><span class="line">Headers:amqp.Table&#123; <span class="string">"x-delay"</span>: autoCancelTime * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></code></pre>    <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p>通过线上环境发现rabbitmq为集群模式时，节点类型为ram模式可能无法安装此插件，暂时未找到解决方案，修改为disc模式可以使用。</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GRPC</title>
      <link href="/2021/07/25/GRPC/"/>
      <url>/2021/07/25/GRPC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;最近需要给运维项目做个定时删除数据的功能，正好需要接触grpc框架，这里对grpc的学习做一下记录</p><hr><ul><li>gRPC vs. Restful API</li></ul><p><a href="https://imgse.com/i/pFeoLdg" target="_blank" rel="noopener">        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s11.ax1x.com/2024/01/24/pFeoLdg.png"  alt="pFeoLdg.png">      </a></p><ul><li><p>然后就会接触新的一种数据交换格式protocol buffers<br><br>protobuf(Google Protocol Buffers)是Google提供一个具有高效的协议数据交换格式工具库(类似Json)，但相比于Json，Protobuf有更高的转化效率，时间效率和空间效率都是JSON的3-5倍.</p><ul><li><p><strong>语言无关、平台无关:</strong> 即 ProtoBuf 支持 Java、C++、Python 等多种语言，支持多个平台</p></li><li><p><strong>高效:</strong> 即比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单</p></li><li><p><strong>扩展性、兼容性好:</strong> 你可以更新数据结构，而不影响和破坏原有的旧程序</p><ul><li>一、下载protobuf的编译器protoc</li><li>二、编写.proto文件</li></ul><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">package</span> proto;</span><br><span class="line"><span class="comment">//不加时可能会出现 protoc-gen-go: unable to determine Go import path错误</span></span><br><span class="line">option go_package = <span class="string">"./proto;hello_grpc"</span>;</span><br><span class="line"><span class="comment">// define a service</span></span><br><span class="line">service HelloWorldService &#123;</span><br><span class="line">    <span class="comment">// define the interface and data type</span></span><br><span class="line">    rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the data type of request</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">    <span class="keyword">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the data type of response</span></span><br><span class="line">message HelloReply &#123;</span><br><span class="line">    <span class="keyword">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>运行protoc –go_out=plugins=grpc:./proto  ./proto/helloworld.proto 会自动生成*.pb.go文件</li></ul></li></ul></li><li><p>client</p>   <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">func</span> <span class="title">Grpcs</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(setting.JsonConfig.Url.UploadUrl, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Info(<span class="string">"无法连接到服务端"</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"> proto.NewHelloWorldService(conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>server</p><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">grpcs</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">lis, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":9050"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Info(<span class="string">"监听grpc出错："</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">proto.RegisterHelloWorldServiceServer(s, &amp;servers&#123;&#125;)</span><br><span class="line">reflection.Register(s)</span><br><span class="line"><span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Info(<span class="string">"开启grpc失败："</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> grpc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SingleFlight-防缓存击穿</title>
      <link href="/2021/07/13/singleflight-%E9%98%B2%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
      <url>/2021/07/13/singleflight-%E9%98%B2%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;随着客户数增加，月末时查询数据又比较频繁，最近出现了许多慢接口，于是开始优化这些慢接口相关sql语句与逻辑处理，并将部分客户分流到其他服务器，减轻服务器的压力；除了上述操作还是想通过SingleFlight（防缓存击穿)减少某个时段接口的大量访问，避免直接大量请求直接访问数据库,进一步增强接口的稳定性。</p><hr><p><strong>SingleFlight介绍</strong></p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;singleflight 这个库的主要作用就是将一组相同的请求合并成一个请求，实际上只会去请求一次，然后对所有的请求返回相同的结果,充分利用到了map和互斥锁的特性。</p></blockquote> <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">相关结构</span><br><span class="line"></span><br><span class="line"> <span class="comment">//singleflight类的使用方法就新建一个singleflight.Group，同一个group中，同样的key同时只能被执行一次</span></span><br><span class="line"> <span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">mu sync.Mutex       <span class="comment">// protects m</span></span><br><span class="line">m  <span class="keyword">map</span>[<span class="keyword">string</span>]*call <span class="comment">// lazily initialized</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每一个 singleflight.call结构体都保存了当前调用对应的信息</span></span><br><span class="line"><span class="keyword">type</span> call <span class="keyword">struct</span> &#123;</span><br><span class="line">wg sync.WaitGroup</span><br><span class="line"><span class="comment">// 函数返回值和err信息</span></span><br><span class="line">val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">err error</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否调用了 forget 方法</span></span><br><span class="line">forgotten <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录这个 key 被分享了多少次</span></span><br><span class="line">dups  <span class="keyword">int</span></span><br><span class="line">chans []<span class="keyword">chan</span>&lt;- Result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">主要函数</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  传入key，以及回调函数，如果key相同，fn方法只会执行一次，同步等待 </span></span><br><span class="line"><span class="comment">返回值v:表示fn执行结果</span></span><br><span class="line"><span class="comment">返回值err:表示fn的返回的err</span></span><br><span class="line"><span class="comment">第三个返回值shared：表示是否是真实fn返回的还是从保存的map[key]返回的，也就是共享的*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Group)</span> <span class="title">Do</span><span class="params">(key <span class="keyword">string</span>, fn <span class="keyword">func</span>()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span>) <span class="params">(v <span class="keyword">interface</span>&#123;&#125;, err error, shared <span class="keyword">bool</span>)</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//DoChan(DoChan方法类似Do方法，只是返回的是一个chan)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Group)</span> <span class="title">DoChan</span><span class="params">(key <span class="keyword">string</span>, fn <span class="keyword">func</span>()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span>) &lt;-<span class="title">chan</span> <span class="title">Result</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Forget 设计Forget 控制key关联的值是否失效，默认以上两个方法只要fn方法执行完成后，内部维护的fn的值也删除（即并发结束后就失效了）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Group)</span> <span class="title">Forget</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</span><br></pre></td></tr></table></div></figure> <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> g singleflight.Group</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">appG := app.Gin&#123;C: c, ServiceName: <span class="string">"GrouponService.GrouponOrderDetail"</span>&#125;</span><br><span class="line"></span><br><span class="line">result := g.DoChan(<span class="string">"test"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"><span class="keyword">return</span> getGrouponOrder()</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> r := &lt;-result:</span><br><span class="line">appG.Response(http.StatusOK, e.SUCCESS, r.Val)</span><br><span class="line"><span class="keyword">case</span> &lt;-c.Done():</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGrouponOrder</span><span class="params">()</span> <span class="params">(models.GrouponOrder, error)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取数据库"</span>)</span><br><span class="line">grouponOrderM := models.GrouponOrder&#123;Db: db.GrouponDB&#125;</span><br><span class="line"><span class="keyword">return</span> grouponOrderM.GetGrouponOrderByUid(<span class="string">"d9179413-3c92-4baa-befe-098fcdc93331"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>    <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p>这里DO方法可能会引起阻塞，直到第一个请求执行 fn 返回后，其他请求才会返回。可以使用 DoChan 结合 ctx + select 做超时控制。</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2021/06/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/06/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;最近需要对接第三方支付，但是需要兼容老的那套支付流程，为了减少相关判断，决定采用策略模式对原来的代码结构进行修改，同时方便后期扩展。</p><hr><ul><li>什么是策略模式?<blockquote><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p></blockquote></li></ul><p>相关代码</p><ul><li>一. 创建支付类型工厂 <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayWayFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;PayWayEnum, AbstractPayWayService&gt; services = <span class="keyword">new</span> ConcurrentHashMap&lt;PayWayEnum, AbstractPayWayService&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractPayWayService <span class="title">createPayWayObject</span><span class="params">(PayWayEnum payWayEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> services.get(payWayEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  每个策略类实现了InitializingBean接口的作用是每当策略类被spring容器启动初始化后会调用afterPropertiesSet方法，而在这个方法里面的作用是会往工厂里针对不同用户等级保存其对应的用户策略引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(PayWayEnum payWayEnum, AbstractPayWayService abstractPayWayService)</span> </span>&#123;</span><br><span class="line">        services.put(payWayEnum, abstractPayWayService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li>二. 创建支付方法抽象类</li><li>三. 根据具体的支付类型创建支付实现类,并注册到支付工厂<figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdPartyPayService</span> <span class="keyword">extends</span> <span class="title">AbstractPayWayService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayWayFactory.register(PayWayEnum.THIRD_PAY_WAY, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li>四. 调用方式<figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbstractPayWayService abstractPayWayService = PayWayFactory.createPayWayObject(payWayEnum);</span><br><span class="line">TradePreCreateResDTO resDTO = abstractPayWayService.wap(req, merchant, extended, outTradeNo, businessResult);</span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kafka搭建在线消息中转服务</title>
      <link href="/2021/05/20/Kafka%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BF%E6%B6%88%E6%81%AF%E4%B8%AD%E8%BD%AC%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/05/20/Kafka%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BF%E6%B6%88%E6%81%AF%E4%B8%AD%E8%BD%AC%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;最近需要做一个硬件设备消息中转服务，在初步估算消息的量和现有服务结构后，原先的rabbitMQ可能不太适合用来中转消息，选择吞吐量更高的Kafka作为消息队列。</p><hr><ul><li>根据目前的服务结构，设计在线消息中转服务流程图<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-8.png"  alt="upload successful">      </li></ul><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;目前服务分流在不同的服务器上，通过Kafka的分区可以实现管理多个服务，并互不影响；由于部分设备消息不可丢失，需要消息补发机制，为了避免后期频繁访问数据库，造成数据库访问压力，创建了2个通道分别去管理设备消息的缓存转发与存储，设备消息的中转与补发相关操作都可以直接访问缓存数据，设备消息的存储操作单独开一个消息通道进行处理，这样做的好处就是防止重启等操作丢失消息，减少了设备消息丢失的概率，同时也保证了消息的一致性。</p></blockquote><p><strong>一. docker搭建Kafka和zookeeper环境(教程较多，这里就不再具体描述)<br></strong><br><strong>二. Kafka生产者以及消费者的创建</strong></p><ul><li>生产者的创建</li></ul><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// kafka生产者发送信息方式</span></span><br><span class="line">Sync  = <span class="string">"Sync"</span></span><br><span class="line">Async = <span class="string">"Async"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Producer AbsKafkaProducer</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbsKafkaProducer 抽象生产者接口</span></span><br><span class="line"><span class="keyword">type</span> AbsKafkaProducer <span class="keyword">interface</span> &#123;</span><br><span class="line">NewKafkaProducer(address, topic <span class="keyword">string</span>, duration time.Duration) error</span><br><span class="line">Send(value []<span class="keyword">byte</span>, partitionNumber <span class="keyword">int32</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SyncKafkaProducer 同步kafka生产者</span></span><br><span class="line"><span class="keyword">type</span> SyncKafkaProducer <span class="keyword">struct</span> &#123;</span><br><span class="line">Producer    sarama.SyncProducer <span class="comment">//同步生产者</span></span><br><span class="line">KafkaConfig *KafkaConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AsyncKafkaProducer kafka异步生产者</span></span><br><span class="line"><span class="keyword">type</span> AsyncKafkaProducer <span class="keyword">struct</span> &#123;</span><br><span class="line">KafkaConfig *KafkaConfig         <span class="comment">//共有的kafka生产者配置在这个里面</span></span><br><span class="line">Producer    sarama.AsyncProducer <span class="comment">//异步生产者</span></span><br><span class="line">IsClose     <span class="keyword">chan</span> error           <span class="comment">// 监听producer是否可以关闭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KafkaConfig kafka生产者</span></span><br><span class="line"><span class="keyword">type</span> KafkaConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">AddressList []<span class="keyword">string</span>       <span class="comment">//地址列表</span></span><br><span class="line">Topic       <span class="keyword">string</span>         <span class="comment">//kafka topic</span></span><br><span class="line">Config      *sarama.Config <span class="comment">//kafka配置信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NewProducer 创建生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProducer</span><span class="params">(address, topic <span class="keyword">string</span>, duration time.Duration, syncOrAsync <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> address == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"broker地址未定义"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> topic == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"topic不能为空"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> producer AbsKafkaProducer</span><br><span class="line"><span class="keyword">switch</span> syncOrAsync &#123;</span><br><span class="line"><span class="keyword">case</span> Sync:</span><br><span class="line">producer = &amp;SyncKafkaProducer&#123;&#125;</span><br><span class="line">soelog.Logger.Info(fmt.Sprintf(<span class="string">"开始创建同步生产者,topic名称:%s"</span>, topic))</span><br><span class="line"><span class="keyword">case</span> Async:</span><br><span class="line">producer = &amp;AsyncKafkaProducer&#123;&#125;</span><br><span class="line">soelog.Logger.Info(fmt.Sprintf(<span class="string">"开始创建异步生产者,topic名称:%s"</span>, topic))</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"未定义生产者类型"</span>)</span><br><span class="line">&#125;</span><br><span class="line">err := producer.NewKafkaProducer(address, topic, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">Producer = producer</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewProducerByMessage 创建kafka基本生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProducerByMessage</span><span class="params">(address, topic <span class="keyword">string</span>, duration time.Duration)</span> <span class="params">(*KafkaConfig, error)</span></span> &#123;</span><br><span class="line"><span class="comment">//根据字符串解析地址列表</span></span><br><span class="line">addressList := strings.Split(address, <span class="string">","</span>)</span><br><span class="line"><span class="comment">//配置producer参数</span></span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line"><span class="comment">//等待服务器所有副本都保存成功后的响应</span></span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll</span><br><span class="line"><span class="comment">//随机向partition发送消息  NewRoundRobinPartitioner轮询策略(顺序分配),NewRandomPartitioner随机策略, NewManualPartitioner</span></span><br><span class="line">config.Producer.Partitioner = sarama.NewManualPartitioner</span><br><span class="line"><span class="comment">//是否等待成功和失败后的响应,只有上面的RequireAcks设置不是NoReponse这里才有用,设置为true后,必须从通道中读取,否则会阻塞</span></span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span></span><br><span class="line">config.Producer.Return.Errors = <span class="literal">true</span></span><br><span class="line"><span class="comment">//注意，版本设置不对的话，kafka会返回很奇怪的错误，并且无法成功发送消息</span></span><br><span class="line">config.Version = sarama.V2_0_0_0</span><br><span class="line">config.Producer.Timeout = duration</span><br><span class="line"><span class="keyword">if</span> config.Producer.Timeout == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">//默认5S</span></span><br><span class="line">config.Producer.Timeout = time.Second * <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;KafkaConfig&#123;</span><br><span class="line">AddressList: addressList,</span><br><span class="line">Topic:       topic,</span><br><span class="line">Config:      config,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *SyncKafkaProducer)</span> <span class="title">NewKafkaProducer</span><span class="params">(address, topic <span class="keyword">string</span>, duration time.Duration)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">k.KafkaConfig, err = NewProducerByMessage(address, topic, duration)</span><br><span class="line">k.Run()</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run kafka异步生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *SyncKafkaProducer)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="literal">nil</span> || k.KafkaConfig == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建异步producer</span></span><br><span class="line">producer, err := sarama.NewSyncProducer(k.KafkaConfig.AddressList, k.KafkaConfig.Config)</span><br><span class="line"><span class="comment">//如果创建失败主动置空k.producer，否则producer不为空，在重启的时候k.producer是会有值的</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">k.Producer = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> producer == <span class="literal">nil</span> &#123;</span><br><span class="line">k.Producer = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">k.Producer = producer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步生产者发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *SyncKafkaProducer)</span> <span class="title">Send</span><span class="params">(value []<span class="keyword">byte</span>, partitionNumber <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="literal">nil</span> || k.KafkaConfig == <span class="literal">nil</span> || value == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;</span><br><span class="line">Topic: k.KafkaConfig.Topic,</span><br><span class="line">Value: sarama.ByteEncoder(value),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> k.Producer == <span class="literal">nil</span> &#123;</span><br><span class="line">k.Run()</span><br><span class="line"><span class="keyword">if</span> k.Producer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_, _, err := k.Producer.SendMessage(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//重连生产者</span></span><br><span class="line"><span class="keyword">if</span> k.Producer != <span class="literal">nil</span> &#123;</span><br><span class="line">k.Producer.Close()</span><br><span class="line">&#125;</span><br><span class="line">k.Run()</span><br><span class="line"><span class="comment">//TODO 是否需要重发</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewKafkaProducer 创建kafka异步生产者实例，并初始化参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *AsyncKafkaProducer)</span> <span class="title">NewKafkaProducer</span><span class="params">(address, topic <span class="keyword">string</span>, duration time.Duration)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//配置异步producer启动参数</span></span><br><span class="line">k.IsClose = <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">2</span>)</span><br><span class="line">k.KafkaConfig, err = NewProducerByMessage(address, topic, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//启动kafka异步producer</span></span><br><span class="line">k.Run()</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send kafka异步发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *AsyncKafkaProducer)</span> <span class="title">Send</span><span class="params">(value []<span class="keyword">byte</span>, partitionNumber <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//如果实例或者配置为空，直接返回。如果发送数据为空也直接返回</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="literal">nil</span> || k.KafkaConfig == <span class="literal">nil</span> || value == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装消息实例,未指定分区,按照默认分区策略发送</span></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;</span><br><span class="line">Topic: k.KafkaConfig.Topic,</span><br><span class="line">Value: sarama.ByteEncoder(value),</span><br><span class="line"><span class="comment">//config.Producer.Partitioner 设置为NewManualPartitioner才可生效</span></span><br><span class="line">Partition: partitionNumber,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里一般不会出现，producer实例为空时，表示创建异步producer失败</span></span><br><span class="line"><span class="keyword">if</span> k.Producer == <span class="literal">nil</span> &#123;</span><br><span class="line">k.Run()</span><br><span class="line"><span class="keyword">if</span> k.Producer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">//producer 出现error需要重新启动</span></span><br><span class="line"><span class="keyword">case</span> &lt;-k.IsClose:</span><br><span class="line"><span class="keyword">if</span> k.Producer != <span class="literal">nil</span> &#123;</span><br><span class="line">k.Producer.Close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新连接生产者</span></span><br><span class="line">k.Run()</span><br><span class="line"><span class="comment">//TODO 直接返回，此条消息浪费掉了，看后期是否需要重新发送失败信息</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// 正常情况发送消息</span></span><br><span class="line">k.Producer.Input() &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建异步生产者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *AsyncKafkaProducer)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="literal">nil</span> || k.KafkaConfig == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建异步producer</span></span><br><span class="line">producer, err := sarama.NewAsyncProducer(k.KafkaConfig.AddressList, k.KafkaConfig.Config)</span><br><span class="line"><span class="comment">//如果创建失败主动置空k.producer，否则producer不为空，在重启的时候k.producer是会有值的</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"创建生产者失败:%s"</span>, err.Error()))</span><br><span class="line">k.Producer = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> producer == <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"创建生产者失败"</span>))</span><br><span class="line">k.Producer = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">k.Producer = producer</span><br><span class="line"><span class="comment">//必须开启 config.Producer.Return才能进入</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(p sarama.AsyncProducer)</span></span> &#123;</span><br><span class="line">errors := p.Errors()</span><br><span class="line">success := p.Successes()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">//出现了错误</span></span><br><span class="line"><span class="keyword">case</span> rc := &lt;-errors:</span><br><span class="line"><span class="keyword">if</span> rc != <span class="literal">nil</span> &#123;</span><br><span class="line">k.IsClose &lt;- fmt.Errorf(<span class="string">"send kafka data error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> res := &lt;-success:</span><br><span class="line">data, _ := res.Value.Encode()</span><br><span class="line">fmt.Printf(<span class="string">"发送成功，value=%s \n"</span>, <span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(producer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>消费者的创建</li></ul><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义策略</span></span><br><span class="line"><span class="keyword">type</span> StickyBalancer <span class="keyword">struct</span> &#123;</span><br><span class="line">topic <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *StickyBalancer)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.topic</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定监听topic的某个分区 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *StickyBalancer)</span> <span class="title">Plan</span><span class="params">(members <span class="keyword">map</span>[<span class="keyword">string</span>]sarama.ConsumerGroupMemberMetadata, topics <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">int32</span>)</span> <span class="params">(sarama.BalanceStrategyPlan, error)</span></span> &#123;</span><br><span class="line">plan := <span class="built_in">make</span>(sarama.BalanceStrategyPlan, <span class="built_in">len</span>(members))</span><br><span class="line"><span class="keyword">for</span> memberID, metadataWithPartitionInfo := <span class="keyword">range</span> members &#123;</span><br><span class="line">planResult := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">int32</span>)</span><br><span class="line">planResult[c.topic] = <span class="built_in">append</span>(planResult[c.topic], <span class="keyword">int32</span>(metadataWithPartitionInfo.UserData[<span class="number">0</span>]))</span><br><span class="line">plan[memberID] = planResult</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> plan, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBindConsumer</span><span class="params">(groupID <span class="keyword">string</span>, topics []<span class="keyword">string</span>, partitions <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 先初始化 kafka</span></span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Version = sarama.V2_0_0_0</span><br><span class="line">config.Consumer.Return.Errors = <span class="literal">true</span></span><br><span class="line"><span class="comment">//指定监听某个分区</span></span><br><span class="line">config.Consumer.Group.Rebalance.Strategy = &amp;StickyBalancer&#123;topic: topics[<span class="number">0</span>]&#125;</span><br><span class="line">config.Consumer.Group.Member.UserData = []<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(partitions)&#125;</span><br><span class="line"><span class="comment">// 开始连接kafka服务器</span></span><br><span class="line">group, err := sarama.NewConsumerGroup([]<span class="keyword">string</span>&#123;setting.JsonConfig.Kafka.Server&#125;, groupID, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"connect kafka failed:%s"</span>, err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> group.Close()</span><br><span class="line"><span class="comment">//防止协程泄露</span></span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> err := <span class="keyword">range</span> group.Errors() &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"kafka group errors :%s "</span>, err.Error()))</span><br><span class="line"><span class="keyword">if</span> strings.Contains(err.Error(), <span class="string">"The requested offset is outside the range of offsets maintained by the server for the given topic/partition"</span>) &#123;</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> NewBindConsumer(groupID, topics)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">soelog.Logger.Info(fmt.Sprintf(<span class="string">"创建kafka消费者组:%s,topic:%v"</span>, groupID, topics))</span><br><span class="line"><span class="comment">// 需要监听的主题</span></span><br><span class="line">handler := ConsumerGroupHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 启动kafka消费组模式，消费的逻辑在上面的 ConsumeClaim 这个方法里</span></span><br><span class="line">err = group.Consume(ctx, topics, handler)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"消费者连接失败:%s "</span>, err.Error()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ok := &lt;-done:</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">soelog.Logger.Info(<span class="string">"Kafka 消费者重连中"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写 setup,cleanup,consumeClaim 方法</span></span><br><span class="line"><span class="keyword">type</span> ConsumerGroupHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ConsumerGroupHandler)</span> <span class="title">Setup</span><span class="params">(_ sarama.ConsumerGroupSession)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ConsumerGroupHandler)</span> <span class="title">Cleanup</span><span class="params">(_ sarama.ConsumerGroupSession)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法用来消费消息的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h ConsumerGroupHandler)</span> <span class="title">ConsumeClaim</span><span class="params">(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取消息</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> msg := &lt;-claim.Messages():</span><br><span class="line"><span class="keyword">if</span> msg != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"消息下标:%d,消息内容:%s,分区:%d,topic通道:%s"</span>, msg.Offset, <span class="keyword">string</span>(msg.Value), msg.Partition, msg.Topic)</span><br><span class="line"><span class="comment">//TODO 业务处理</span></span><br><span class="line"><span class="comment">//只有提交了消息位移,消息才能被消费</span></span><br><span class="line">  sess.MarkMessage(msg, <span class="string">"modified metadata"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>三.Redis监听器（消息补发）</strong></p><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//ReissueMessageLogTask 补发定时任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReissueMessageLogTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn := specialdb.Redis.Pool.Get()</span><br><span class="line">conn.Do(<span class="string">"CONFIG"</span>, <span class="string">"SET"</span>, <span class="string">"notify-keyspace-events"</span>, <span class="string">"KEx"</span>)</span><br><span class="line">psc := redis.PubSubConn&#123;Conn: conn&#125;</span><br><span class="line">psc.PSubscribe(<span class="string">"__keyspace@0__:"</span> + MessagerCache + <span class="string">"*"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> msg := psc.Receive().(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> redis.Message:</span><br><span class="line"><span class="comment">//监听过期key</span></span><br><span class="line">messageType := <span class="keyword">string</span>(msg.Data)</span><br><span class="line"><span class="keyword">if</span> messageType == <span class="string">"expired"</span> &#123;</span><br><span class="line">arr := strings.Split(msg.Channel, <span class="string">":"</span>)</span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">if</span> length &gt; <span class="number">0</span> &#123;</span><br><span class="line">tenantID := arr[length<span class="number">-4</span>]</span><br><span class="line">uid := arr[length<span class="number">-1</span>]</span><br><span class="line"><span class="comment">// TODO 查询消息是否确认,补发消息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> redis.Subscription:</span><br><span class="line">soelog.Logger.Info(fmt.Sprintf(<span class="string">"开始监听redis过期key,消息类型:%s,消息pattern:%s"</span>, msg.Kind, msg.Channel))</span><br><span class="line"><span class="keyword">if</span> msg.Count == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> error:</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"error: %v\n"</span>, msg))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S-基础</title>
      <link href="/2021/04/25/K8S-%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/04/25/K8S-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;应用部署方式演变:传统部署-&gt;虚拟化部署-&gt;容器化部署</p><ul><li>常用容器编排软件:<ul><li>Swarm:docker自己的容器编排工具</li><li>Mesos:Apache的一个资源统一管控工具,需要和Marahon结合使用</li><li>Kubernetes:Google开源的容器编排工具</li></ul></li></ul><p>Kubernetes主要功能</p><ol><li>自我修复：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li><li>弹性伸缩：可以根据需要，自动对集群中正在运行的容器数量进行调整</li><li>服务发现：服务可以通过自动发现的形式找到它所依赖的服务</li><li>负载均衡：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li><li>版本回退：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li><li>存储编排：可以根据容器自身的需求自动创建存储卷</li></ol><p>Kubernetes组件</p><ol><li><p>控制节点(master)</p><ul><li>ApiServer 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</li><li>Scheduler 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</li><li>ControllerManager负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</li><li>Etcd 负责存储集群中各种资源对象的信息</li></ul></li><li><p>工作节点(node)</p><ul><li>Kubelet : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</li><li>KubeProxy : 负责提供集群内部的服务发现和负载均衡</li><li>Docker : 负责节点上容器的各种操作</li></ul></li><li><p>Pod kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器，每个pod都有其唯一的IP地址</p></li><li><p>Controller 控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p></li><li><p>Service：pod对外服务的统一入口，下面可以维护者同一类的多个pod</p></li><li><p>Label：标签，用于对pod进行分类，同一类pod会拥有相同的标签</p></li><li><p>NameSpace：命名空间，用来隔离pod的运行环境</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>订单下单－支付流程总结</title>
      <link href="/2021/04/20/%E8%AE%A2%E5%8D%95%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2021/04/20/%E8%AE%A2%E5%8D%95%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp; 近段时间做了商城项目，在对接订单下单支付流程时遇到了不少的问题，也总结了一些经验，在这里做个总结，方便后期做类似功能时能避免这些问题。</p><hr><ul><li><p>为了方便理解，这里做了一个订单下单支付实现的流程图<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="http://img.wz96cj.top/%E8%AE%A2%E5%8D%95%E6%B5%81%E7%A8%8B.png"  alt="">      </p></li><li><p>下单流程</p><ul><li>用户进入下单页面时，前端先请求接口得到唯一订单号(雪花算法)</li><li>再用生成的唯一单号请求下单</li><li>利用redis计数器的原子性判断订单是否新增，新增时加入订单定时取消队列<br>这样可以避免用户重复下单的问题，通过rabbitMQ死信队列自动取消超时订单，同时也保证了订单号的唯一性。</li></ul></li><li><p>支付流程</p><ul><li>这里主要针对微信的Native支付和wap支付，并且处理方式也不同。<ul><li>wap支付发起支付前需要判断订单是否已经关联第三方支付订单号，如果存在需要主动去查询原订单信息，根据原订单返回的支付状态再进行相应的业务处理，避免支付回调超时等问题造成本地订单信息未及时更新。</li></ul></li></ul></li><li><p>相关代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JAVA</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Order <span class="title">createOrder</span><span class="params">(CreateOrderDTO createOrderDTO)</span> </span>&#123;</span><br><span class="line">       checkOrderParams(createOrderDTO);</span><br><span class="line">       <span class="comment">//将订单号加入redis计数器,防止并发下重复下单</span></span><br><span class="line">       String orderKey = SoeDefine.REDIS_ORDER_KEY + createOrderDTO.getOrderId();</span><br><span class="line">       <span class="keyword">long</span> result = incr(orderKey, <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               AutoCancelOrderDTO autoCancelOrderDTO = <span class="keyword">new</span> AutoCancelOrderDTO();</span><br><span class="line">               autoCancelOrderDTO.setOrderId(createOrderDTO.getOrderId());</span><br><span class="line">               autoCancelOrderDTO.setNotifyUrl(projectProperties.getServerUrl() + <span class="string">"/api/order/autoCancelOrder"</span>);</span><br><span class="line">               autoCancelOrderDTO.setShopCode(createOrderDTO.getShopCode());</span><br><span class="line">               autoCancelOrderDTO.setTenantId(createOrderDTO.getTenantId());</span><br><span class="line">               messageQueueService.send(MQConstant.CANCEL_ORDER_DELAY_QUEUE, BeanMapperUtil.bean2Json(autoCancelOrderDTO), <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="number">1</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//过期时间设为1小时与支付订单超时时间进行统一,超时则自动关闭订单</span></span><br><span class="line">           expire(orderKey, <span class="number">3600</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &gt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> SoeRestAPIException(<span class="keyword">new</span> ErrorMessageBody(<span class="string">"订单重复提交"</span>), HttpStatus.BAD_REQUEST);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> orderAdd(createOrderDTO);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>  <figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//GO</span></span><br><span class="line"><span class="comment">//CreateGrouponOrder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *GrouponService)</span> <span class="title">CreateGrouponOrder</span><span class="params">(grouponOrderDTO *GrouponOrderDTO)</span> <span class="params">(data dto.Data)</span></span> &#123;</span><br><span class="line">err := s.checkGrouponOrderParams(grouponOrderDTO)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dto.GetData(<span class="string">"500"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将订单号加入redis计数器</span></span><br><span class="line">key := WaitPayGrouponOrderKey + grouponOrderDTO.GrouponOrderID</span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line">result, err = specialdb.Redis.Incr(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dto.GetData(<span class="string">"500"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> soeWxWapPayRes SoeWxWapPayRes</span><br><span class="line"><span class="keyword">if</span> result == <span class="number">1</span> &#123;</span><br><span class="line">specialdb.Redis.Renew(key, <span class="number">3600</span>)</span><br><span class="line"><span class="comment">//将订单加入rabbit延迟队列</span></span><br><span class="line"><span class="comment">//获取门店自动取消订单时间</span></span><br><span class="line"><span class="keyword">var</span> grouponConfigDTO GrouponConfigDTO</span><br><span class="line">cache := CacheService&#123;Db: s.Db, ParameterKey: CacheGrouponConfig, ShopCode: s.ShopCode, TenantID: s.TenantID&#125;</span><br><span class="line">grouponConfigDTO, err = cache.GetGrouponConfigCache()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dto.GetData(<span class="string">"500"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">cancelOrderDTO := CancelOrderDTO&#123;</span><br><span class="line">ShopCode:  s.ShopCode,</span><br><span class="line">TenantID:  s.TenantID,</span><br><span class="line">OrderId:   grouponOrderDTO.GrouponOrderID,</span><br><span class="line">NotifyUrl: setting.UrlSetting.NotifyUrl + <span class="string">"groupon/autoCancelOrder"</span>,</span><br><span class="line">&#125;</span><br><span class="line">cancelOrderDTOBody, _ := json.Marshal(cancelOrderDTO)</span><br><span class="line">rabbit.SendAutoCancelOrderMessage(cancelOrderDTOBody, grouponConfigDTO.Config.AutoCancelGrouponOrder)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> result &gt; <span class="number">1</span> &#123; <span class="comment">//同笔订单多次提交时</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dto.GetData(<span class="string">"500"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dto.GetData(<span class="string">"200"</span>, soeWxWapPayRes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CodeReview </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>容器核心原理之namspace与cgroup</title>
      <link href="/2021/04/02/%E5%99%A8%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B9%8Bnamspace%E4%B8%8Ecgroup/"/>
      <url>/2021/04/02/%E5%99%A8%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B9%8Bnamspace%E4%B8%8Ecgroup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>先由一句话来引入这两大概念，namespace –资源隔离，croup – 资源控制</p></blockquote><p><strong>NameSpace</strong><br>概念:容器把系统中为同一个业务目标服务的相关进程合成一组，放在一个叫做namespace的空间中，同一个namespace中的进程能够互相通信，但看不见其他namespace中的进程</p><ul><li><p>Linux内核提拱了6种namespace隔离的系统调用<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="http://img.wz96cj.top/namespace%E7%B1%BB%E5%9E%8B"  alt="">      </p></li><li><p>相关函数</p><ul><li>clone() 函数在创建新进程的同时创建 namespace</li><li>setns() 函数可以将当前进程加入到已有的 namespace 中</li><li>unshare() 函数可以在原进程上进行 namespace 隔离</li></ul></li><li><p>查询容器内namespace 方式<br><br>一. 直接进入容器</p><ol><li>docker exec -it rabbitmq /bin/sh </li><li>cd  /proc/pid/ns<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="http://img.wz96cj.top/namspace"  alt="">      </li></ol><p>二. 通过nsenter命令<br></p><ol><li>安装nsenter命令 </li><li>docker container top <container>  查询容器pid  </li><li>nsenter  -t pid -n 进入网络命令空间 </li><li>ip addr</li></ol></li></ul><p><strong>Cgroup</strong><br>概念:Cgroups是control groups的缩写,Cgroups是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如：CPU、内存、IO等）的机制。<br>Cgroups 提供了以下四大功能:</p><ul><li>资源限制（Resource Limitation）：cgroups 可以对进程组使用的资源总额进行限制。如设定应用 运行时使用内存的上限，一旦超过这个配额就发出 OOM（Out of Memory）。</li><li>优先级分配（Prioritization）：通过分配的 CPU 时间片数量及硬盘 IO 带宽大小，实际上就相当于控制了进程运行的优先级。</li><li>资源统计（Accounting）： cgroups 可以统计系统的资源使用量，如 CPU 使用时长、内存用量等等，这个功能非常适用于计费。</li><li>进程控制（Control）：cgroups 可以对进程组执行挂起、恢复等操作。</li></ul><p><strong>相关命令</strong></p><ul><li>cpu-period是用来指定容器对CPU的使用要在多长时间内做一次重新分配。</li><li>-c 或 –cpu-shares 设置容器使用 CPU 的权重。如果不指定，默认值为 1024,某个容器最终能分配到的 CPU 资源取决于它的 cpu share 占所有容器 cpu share 总和的比例</li><li>–cpu-quota是用来指定在这个周期内，最多可以有多少时间用来跑这个容器<br>对多核 CPU 的服务器，Docker 还可以控制容器运行使用哪些 CPU 内核，即使用–cpuset-cpus 参数</li></ul><p>参考链接：<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/janeysj/p/11274515.html"  target="_blank" rel="noopener">Docker底层基石namespace与cgroup</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOROUTINE 泄露</title>
      <link href="/2021/03/25/GOROUTINE-%E6%B3%84%E9%9C%B2/"/>
      <url>/2021/03/25/GOROUTINE-%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;这几天线上的Rabbit经常出现 rabbitmq:Exception (504) Reason: “channel/connection is not open”异常，在修改重连机制的时候发现了重连的时候可能还存在goroutine 泄露的问题，之前在开发的过程中一直没注意goroutine泄露的问题，导致小问题可能会变成重大的隐患。</p><hr><p> <strong>一. 什么是goroutine泄露</strong><br> 如果你启动了一个 goroutine，但并没有符合预期的退出，直到程序结束，此goroutine才退出，这种不合理的使用可能会导致大量 goroutine 无法结束，资源也无法被释放，随着时间推移造成了内存的泄漏，这种情况就是 goroutine 泄露。</p><p> <strong>二. goroutine泄露场景</strong><br> 通常goroutine 泄露场景有以下几种情况：<br> 1.channel操作阻塞导致runtime期间goroutine一直在阻塞等待；<br> 2.goroutine有死循环；</p><ul><li>常见错误示例<figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1.</span>启动了一个 goroutine 阻塞接收 channel</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">     <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        val := &lt;-ch</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"> <span class="number">2.</span>循环的退出条件实现的不对，导致死循环</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="keyword">if</span> a ==<span class="number">100</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line">a++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"111"</span>)</span><br><span class="line">&#125;</span><br><span class="line">   &#125;()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//解决方式：可以创建额外的通道完成协程的退出控制</span></span><br><span class="line">     <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">done:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="keyword">if</span> a ==<span class="number">100</span>&#123;</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">a++</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ok:=&lt;-done:</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"111"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></div></figure></li><li>排查的过程中发现项目中http请求工具包也存在goroutine泄露的问题<figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   respond, err = client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !(respond.StatusCode &gt;= <span class="number">200</span> &amp;&amp; respond.StatusCode &lt;= <span class="number">207</span>) &#123;</span><br><span class="line">err = soeRemoteService.handleError(respond)</span><br><span class="line"><span class="keyword">return</span> result, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err = ioutil.ReadAll(respond.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result, err</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//当请求发生异常时，无法关闭，连接也不会被回收</span></span><br><span class="line"><span class="keyword">defer</span> respond.Body.Close()</span><br></pre></td></tr></table></div></figure>    <div class="note-plugin info">      <span class="note-plugin__icon note-plugin__icon--info">              <i class="fas fa-info-circle"></i>            </span>      <p>总结:开发的过程中很容易忽略goroutine泄露的问题，很多都是由于我们没按照规范去使用，必要时可以结合 pprof工具来排查问题。</p>    </div>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redisson实现分布式锁</title>
      <link href="/2021/03/16/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2021/03/16/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;最近客户在公众号下单时出现支付成功，服务订单却被取消的问题，原来怀疑是支付回调处理的问题，后面经过测试发现是由于微信支付微信支付唤起慢，前端支付按钮又没控制，导致客户重复点击支付，覆盖了服务订单关联的微信预支付订单号，于是这里想按照订单号的维度加锁进行控制。</p><hr><p><strong>常见的同步锁方法</strong></p><ul><li>synchronized关键字（可重入锁，非公平锁 不需要用户去手动释放锁,单例模式-懒汉 创建对象）</li><li>ReentrantLock（可重入锁，可以判断锁状态）</br></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;这次由于唤起支付的响应时间不好判断，考虑到后期服务也可能分布在不同服务器上，决定采用另一种加锁方式–redisson分布式锁</p><ul><li>基本使用方法</li></ul><ol><li><p>导入依赖包  compile group:’org.redisson’,name: ‘redisson’, version: ‘3.10.7’</p></li><li><p>初始化redisson配置</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redisson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSingleServer()</span><br><span class="line">            .setTimeout(<span class="number">1000000</span>)</span><br><span class="line">            .setAddress(<span class="string">"redis://"</span> + redisProperties.getHost() + <span class="string">":"</span> + redisProperties.getPort())</span><br><span class="line">            .setPassword(DesUtil.decrypt(redisProperties.getPassword(), SoeDefine.ENCODER_KEY));</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>加锁</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redissonClient.getLock(SoeDefine.ORDER_LOCK_KEY + createReworkOrderDTO.getOrderId());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lock.tryLock()) &#123;</span><br><span class="line">        <span class="comment">//TODO 成功加锁，业务处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 加锁失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">//锁只由当前线程去解锁</span></span><br><span class="line">    <span class="keyword">if</span> (lock.isLocked() &amp;&amp; lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>加锁时也可以使用以下方法：<br><br> lock.tryLock(param1,param2, TimeUnit.SECONDS)<br><br>param1:最大等待时间,在时间期限之内如果还拿不到锁，就返回false;如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。<br>param2:锁有效时间,超过则自动解锁</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql之VACUUM和VACUUM FULL的使用</title>
      <link href="/2021/02/15/Vacuum-Full%E5%92%8CVacuum/"/>
      <url>/2021/02/15/Vacuum-Full%E5%92%8CVacuum/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;最近操作日志查询时出现查询慢的问题，排查问题的时候发现日志服务所在的数据库占了很大的空间，于是检查日志服务的定时清除日志数据任务是否成功执行了，后面也排除了这个可能性。经过相关资料的了解，postgresql执行删除操作后只是将删除数据的状态置为已删除，该空间不能记录被重新使用，没被回收前还是占据存储空间。</p><hr><ul><li>查找相关资料后，了解到vacuum 和 vacuum full命令。以下是这两种命令的区别</li></ul><p><a href="https://imgse.com/i/pFeoHL8" target="_blank" rel="noopener">        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s11.ax1x.com/2024/01/24/pFeoHL8.png"  alt="pFeoHL8.png">      </a></p>    <div class="note-plugin warning">      <span class="note-plugin__icon note-plugin__icon--warning">              <i class="fas fa-exclamation-circle"></i>            </span>      <p>vacuum full不可在事务中执行，执行期间不能对表进行访问，其执行效率也会很慢。</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PgSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ分布式事务</title>
      <link href="/2020/10/15/RabbitMQ%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/10/15/RabbitMQ%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;近期在负责库存的一个相关功能，涉及不同服务间的数据操作，之前一直对分布式事务只是概念的理解，这次正好亲自尝试一下。</p><hr><ul><li>常用的几种解决方式 <br></li></ul><p>1.两阶段提交（2PC）<br><br>2.补偿事务（TCC）<br><br>3.本地消息表（异步确保）<br><br>4.MQ 事务消息<br></p><ul><li>自己在项目中使用MQ，所以采用消息队列+本地消息表来实现分布式事务，来保证最终一致性。</li></ul><p><strong>流程图</strong></p><p><a href="https://imgse.com/i/pFeoOoQ" target="_blank" rel="noopener">        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s11.ax1x.com/2024/01/24/pFeoOoQ.png"  alt="pFeoOoQ.png">      </a><br><a href="https://imgse.com/i/pFeoqeS" target="_blank" rel="noopener">        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s11.ax1x.com/2024/01/24/pFeoqeS.png"  alt="pFeoqeS.png">      </a></p><ul><li>以下记录了go和java实现的部分实现流程，流程的实现上基本相同，最大的区别是CorrelationId获取的时机不同，java在消息发送到交换机时回调确认就可以获取，而go在回调确认的结构体中只封装了ack和标识，想要获取CorrelationId只可在消费者消费时获取。</li></ul><p>一、创建本地消息发送记录表</p><p><a href="https://imgse.com/i/pFeojij" target="_blank" rel="noopener">        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s11.ax1x.com/2024/01/24/pFeojij.png"  alt="pFeojij.png">      </a></p><p>二、开启rabbit手动ACK确认机制</p><blockquote><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册ack回调确认监听</span></span><br><span class="line">   <span class="keyword">if</span> err := ch.Confirm(<span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> err</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       confirmation = ch.NotifyPublish(<span class="built_in">make</span>(<span class="keyword">chan</span> amqp.Confirmation, <span class="number">1</span>))</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></div></figure></blockquote><blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">application.yml </span><br><span class="line"></span><br><span class="line">rabbitmq:</span><br><span class="line">   host: <span class="number">192.168</span><span class="number">.1</span><span class="number">.208</span></span><br><span class="line">   port: <span class="number">30642</span></span><br><span class="line">   username: guest</span><br><span class="line">   password: guest</span><br><span class="line">   #当消息进入Exchange交换器时就进入回调，但是未进入队列时回调。</span><br><span class="line">   publisher-confirm-type: correlated</span><br><span class="line">   #消息失路由不到队列时触发回调,防止消息丢失;配合spring.rabbitmq.template.mandatory使用 true回调，false直接丢弃消息</span><br><span class="line">   #publisher-returns: false</span><br><span class="line">   listener:</span><br><span class="line">     type: direct</span><br><span class="line">     direct:</span><br><span class="line">       #设置监听为手动答应模式</span><br><span class="line">       acknowledge-mode: manual</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实现ConfirmCallback接口</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfirmCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MessageQueueService messageQueueService;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MessageRecordDao messageRecordDao;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">       .....</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote><p>三、 可靠的消息生产记录消息发送</p><blockquote><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">err = s.Db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="comment">//TODO 1.业务操作</span></span><br><span class="line">   <span class="comment">//TODO 2.预存推送消息日志,用于校验生产者消息是否推送成功</span></span><br><span class="line">   messageRecordM := models.MessageRecord&#123;Db: db.GrouponDB&#125;</span><br><span class="line">   messageRecord := models.MessageRecord&#123;</span><br><span class="line">       UID:          strings.ReplaceAll(uuid.New().String(), <span class="string">"-"</span>, <span class="string">""</span>),</span><br><span class="line">       Content:      <span class="keyword">string</span>(updateGeneralOrderDTOBody),</span><br><span class="line">       BusinessType: <span class="number">2</span>,</span><br><span class="line">       CreateTime:   &amp;now,</span><br><span class="line">   &#125;</span><br><span class="line">   err := messageRecordM.Save(&amp;messageRecord)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;rabbit.SendTransactionMessage(&amp;messageRecord)&#125;)</span><br><span class="line">                      </span><br><span class="line"><span class="comment">//SendTransactionMessage 发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendTransactionMessage</span><span class="params">(messageRecord *models.MessageRecord)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> queueName, exchangeName <span class="keyword">string</span></span><br><span class="line">   <span class="keyword">switch</span> messageRecord.BusinessType &#123;</span><br><span class="line">   <span class="keyword">case</span> GeneralOrderCreate:</span><br><span class="line">       exchangeName = GeneralOrderExchange</span><br><span class="line">       queueName = GeneralOrderCreateQueue</span><br><span class="line">   &#125;</span><br><span class="line">   m := DLXMessage&#123;</span><br><span class="line">       QueueName:   queueName,</span><br><span class="line">       Content:     messageRecord.Content,</span><br><span class="line">       NotifyCount: <span class="number">1</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   body, _ := json.Marshal(m)</span><br><span class="line">   <span class="comment">//校验队列是否存在</span></span><br><span class="line">   <span class="keyword">if</span> _, err := ch.QueueDeclarePassive(</span><br><span class="line">       GeneralOrderCreateQueue, <span class="comment">// name</span></span><br><span class="line">       <span class="literal">true</span>,                    <span class="comment">// duration (note: not durable)</span></span><br><span class="line">       <span class="literal">false</span>,                   <span class="comment">// auto-delete</span></span><br><span class="line">       <span class="literal">false</span>,                   <span class="comment">// exclusive</span></span><br><span class="line">       <span class="literal">false</span>,                   <span class="comment">// noWait</span></span><br><span class="line">       <span class="literal">nil</span>,                     <span class="comment">// arguments</span></span><br><span class="line">   ); err != <span class="literal">nil</span> &#123;</span><br><span class="line">       soelog.Logger.Info(<span class="string">"查询队列信息失败"</span>, zap.String(<span class="string">"错误"</span>, err.Error()))</span><br><span class="line">       <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 推送消息</span></span><br><span class="line">   err := ch.Publish(</span><br><span class="line">       exchangeName, <span class="comment">// exchange 默认模式，exchange为空</span></span><br><span class="line">       queueName,    <span class="comment">// routing key 默认模式路由到同名队列，即是task_queue</span></span><br><span class="line">       <span class="literal">false</span>,        <span class="comment">// mandatory</span></span><br><span class="line">       <span class="literal">false</span>,</span><br><span class="line">       amqp.Publishing&#123;</span><br><span class="line">           ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">           DeliveryMode:  amqp.Persistent,</span><br><span class="line">           CorrelationId: messageRecord.UID,</span><br><span class="line">           Timestamp:     time.Time&#123;&#125;,</span><br><span class="line">           Body:          []<span class="keyword">byte</span>(body),</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       soelog.Logger.Info(<span class="string">"发送消息失败"</span>, zap.String(<span class="string">"错误"</span>, err.Error()))</span><br><span class="line">       <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   messageRecordM := models.MessageRecord&#123;Db: db.GrouponDB&#125;</span><br><span class="line">   retriesNumber := <span class="number">0</span></span><br><span class="line">   <span class="comment">//TODO 监听消息回调确认</span></span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">   Publish:</span><br><span class="line">       <span class="keyword">for</span> &#123;</span><br><span class="line">           <span class="keyword">select</span> &#123;</span><br><span class="line">           <span class="keyword">case</span> confirmed := &lt;-confirmation:</span><br><span class="line">               <span class="comment">//限制消息推送重试次数</span></span><br><span class="line">               <span class="keyword">if</span> !confirmed.Ack &#123;</span><br><span class="line">                   <span class="keyword">if</span> retriesNumber &gt;= <span class="number">5</span> &#123;</span><br><span class="line">                       soelog.Logger.Info(<span class="string">"超过重试次数，请手工重试"</span>)</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">                   &#125;</span><br><span class="line">                   retriesNumber++</span><br><span class="line">                   <span class="comment">//更新消息重试次数</span></span><br><span class="line">                   messageRecordM.UpdateRetriesNumber(messageRecord.UID)</span><br><span class="line">                   <span class="comment">//重新推送该消息（消息重发，保证消息发送到队列）</span></span><br><span class="line">                   err := ch.Publish(</span><br><span class="line">                       exchangeName, <span class="comment">// exchange 默认模式，exchange为空</span></span><br><span class="line">                       queueName,    <span class="comment">// routing key 默认模式路由到同名队列，即是task_queue</span></span><br><span class="line">                       <span class="literal">false</span>,        <span class="comment">// mandatory</span></span><br><span class="line">                       <span class="literal">false</span>,</span><br><span class="line">                       amqp.Publishing&#123;</span><br><span class="line">                           ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">                           DeliveryMode:  amqp.Persistent,</span><br><span class="line">                           CorrelationId: messageRecord.UID,</span><br><span class="line">                           Timestamp:     time.Time&#123;&#125;,</span><br><span class="line">                           Body:          []<span class="keyword">byte</span>(body),</span><br><span class="line">                       &#125;)</span><br><span class="line">                   soelog.Logger.Info(<span class="string">"发送消息失败"</span>, zap.String(<span class="string">"错误"</span>, err.Error()))</span><br><span class="line">                   <span class="keyword">break</span> Publish</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">//更新本地信息</span></span><br><span class="line">                   messageRecordM.UpdateStatus(messageRecord.UID)</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">               &#125;</span><br><span class="line">           <span class="keyword">case</span> &lt;-time.After(<span class="number">2</span> * time.Second):</span><br><span class="line">               fmt.Println(<span class="string">"未获取到回调确认信息"</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote><p>四、 可靠消息处理(消费者消费消息）</p><blockquote><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> d := <span class="keyword">range</span> messages &#123;</span><br><span class="line">           <span class="comment">//TODO 校验消费者消息处理次数</span></span><br><span class="line">           <span class="keyword">if</span> correlationID != d.CorrelationId &#123;</span><br><span class="line">               correlationID = d.CorrelationId</span><br><span class="line">               retriesNumber = <span class="number">1</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> correlationID == d.CorrelationId &#123;</span><br><span class="line">               retriesNumber++</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> retriesNumber &gt; <span class="number">5</span> &#123;</span><br><span class="line">               soelog.Logger.Info(<span class="string">"消息处理失败，请手工处理"</span>)</span><br><span class="line">               <span class="comment">//TODO 将未消费成功的消息加入死信队列</span></span><br><span class="line">               d.Ack(<span class="literal">false</span>)</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">var</span> message Message</span><br><span class="line">               err = json.Unmarshal(d.Body, &amp;message)</span><br><span class="line">               <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                   soelog.Logger.Info(<span class="string">"信息json转换错误："</span> + err.Error())</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//TODO 消费者处理业务,校验幂等性</span></span><br><span class="line">             </span><br><span class="line">               <span class="comment">//multiple 是否多选，requeue true--重新放回队列，false--删除消息</span></span><br><span class="line">               <span class="keyword">if</span> data.ResultCode != <span class="string">"200"</span> &#123;</span><br><span class="line">                   d.Nack(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">//ack通知，将消息移除队列,删除本地消息(或更新状态)</span></span><br><span class="line">                   messageRecordM := models.MessageRecord&#123;Db: db.Db&#125;</span><br><span class="line">                   messageRecordM.Delete(d.CorrelationId)</span><br><span class="line">                   d.Ack(<span class="literal">false</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;()</span><br><span class="line">   &lt;-forever </span><br></pre></td></tr></table></div></figure><p>五、 可靠消息处理(定时任务–消息重发)</p><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">c := cron.New()</span><br><span class="line">c.AddFunc(<span class="string">"0 0/5 * * * ?"</span>, rabbit.HandleMessageRecord)</span><br><span class="line">c.Start()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时任务处理未处理成功的消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleMessageRecord</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//查询所有未处理成功的消息</span></span><br><span class="line">   messageRecordM := models.MessageRecord&#123;Db: db.GrouponDB&#125;</span><br><span class="line">   messageRecordList, err := messageRecordM.GetMessageRecordList()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> _, value := <span class="keyword">range</span> messageRecordList &#123;</span><br><span class="line">       ants.Submit(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">           SendTransactionMessage(&amp;value)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo版本升级</title>
      <link href="/2020/08/15/Mongo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/15/Mongo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;由于本地mongo环境还是3.4版本，无法使用mongo事务功能，于是尝试升级mongo的版本</p><hr><ul><li>刚开始以为只需将mongo数据库备份，再docker-compose中的mongo版本号修改为最新的版本，重启docker就完事了，结果出现了遇到了许多问题。</li><li>将mongo版本直接升级到4.0时，启动一直出现shutdown: removing fs lock…，网上给出的解决方式有以下几种<br></li></ul><ol><li>删除mongod.lock文件</li><li>通过mongod –repair命令修复<br>但是两种方法都不能解决问题，在查找的问题的过程发现mongo3.6版本以下的版本不可直接升级到4.0,便开始从该方面入手尝试升级。</li></ol><p>一. 首先进入mongo执行相关命令，再升级到4.0</p><blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="comment"># MongoDB version 3.6</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mongo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> use admin</span></span><br><span class="line">db.adminCommand( &#123; setFeatureCompatibilityVersion: "3.6" &#125; )</span><br><span class="line">//升级完成后再将配置改为4.0</span><br><span class="line">db.adminCommand( &#123; setFeatureCompatibilityVersion: "4.0" &#125; ) </span><br></pre></td></tr></table></div></figure></blockquote><p>二. 这时候mongo已经可以正常启动，版本也成功升级到了4.0，但是并不能成功使用事务，并报出新的异常Multi-document transactions are available for replica sets only，通过查找相关资料，了解到mongo4.0事务必须用在副本集情景下使用。</p><blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">修改 mongodb.conf</span><br><span class="line">net:</span><br><span class="line"> port: 27017</span><br><span class="line"> &#x2F;&#x2F;修改ip,否则初始化副本集无法连接</span><br><span class="line"> bindIp: 0.0.0.0</span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 128</span><br><span class="line">  replSetName: &quot;rs0&quot;</span><br><span class="line">  enableMajorityReadConcern: true</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;进入mongo，初始化副本集</span><br><span class="line">rs.initiate(&#123; _id:&quot;rs0&quot;, members:[&#123;_id:0,host:&#39;localhost:27017&#39;&#125;]&#125;)</span><br><span class="line">&#x2F;&#x2F;查询是否创建成功</span><br><span class="line">rs.status() </span><br></pre></td></tr></table></div></figure><p>注：mongo的url配置上必须加上 replicaSet=rs0，否则事务无法生效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arthas--Java诊断工具</title>
      <link href="/2020/07/20/Arthas-Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/07/20/Arthas-Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;最近浏览公众号文章时，了解到一款Java诊断工具–Arthas,可以帮助我们更快排查问题，于是下载了相关依赖包，以下是对该工具的简单使用。<br></p><hr><p><strong>官方说明文档</strong>:<span class="exturl"><a class="exturl__link"   href="http://arthas.gitee.io/"  target="_blank" rel="noopener">Arthas</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><strong>Arthas 一共有两种使用方式</strong></li></ul><ol><li>直接使用 <blockquote><p>curl -O <span class="exturl"><a class="exturl__link"   href="https://arthas.aliyun.com/arthas-boot.jar"  target="_blank" rel="noopener">https://arthas.aliyun.com/arthas-boot.jar</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>java -jar arthas-boot.jar</p></blockquote></li><li>通过arthas tunnel server连接远程arthas,由于平时服务不可能只有一个，接下来主要介绍第二种方式的使用。<br><br>一. 下载Arthas依赖包 <br><br>implementation group: ‘com.taobao.arthas’, name: ‘arthas-spring-boot-starter’, version: ‘3.4.6’<br><br>二. 配置application.yml,默认连接端口为7777<br><blockquote><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">application.yml</span></span><br><span class="line"><span class="attr">arthas:</span></span><br><span class="line"><span class="string">//</span> <span class="string">客户端唯一id</span></span><br><span class="line"> <span class="attr">agent-id:</span> <span class="string">test</span></span><br><span class="line"><span class="string">//</span> <span class="string">arthas地址</span></span><br><span class="line"> <span class="attr">tunnel-server:</span> <span class="string">ws://ip:7777/ws</span> </span><br></pre></td></tr></table></div></figure></blockquote></li></ol><ul><li>连接成功</li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-2.png"  alt="upload successful">      <br>注：如果使用IDEA，可以下载 arthas自动生成命令插件–arthas idea</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pg jsonb类型的使用</title>
      <link href="/2020/05/15/pg-jsonb%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/15/pg-jsonb%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>　前言:当字段类型不确定时,我们会选择存一个json类型的字段,之前一般都是直接设置为text类型,后面发现pg本身就自带json类型,于是准备尝试下这个用法.</p></blockquote><ul><li>PostgreSQL支持两种 JSON 数据类型：json 和 jsonb。它们几乎接受完全相同的值集合作为输入。两者最大的区别是效率。json数据类型存储输入文本的精准拷贝，处理函数必须在每 次执行时必须重新解析该数据。而jsonb数据被存储在一种分解好的二进制格式中，因为需要做附加的转换，它在输入时要稍慢一些。但是 jsonb在处理时要快很多，因为不需要重新解析,并且jsonb支持索引.</li></ul><hr><ul><li><p>以下内容是自己在java项目中的部分使用<br><br><strong>一.原先的实体类默认只能使用基础类型,使用jsonb类型时,需要另外引入相关的依赖包</strong><br><br>gradle:compile group: ‘com.vladmihalcea’, name: ‘hibernate-types-52’, version: ‘2.9.13’<br><br><strong>二.注解的使用</strong><br><br>  在实体类名加上</p><pre><code>@TypeDef(name = &quot;jsonb&quot;, typeClass = JsonBinaryType.class)</code></pre><p> 在字段上加上</p><pre><code>@Type(type = &quot;jsonb&quot;)</code></pre><p> 这样就可以直接使用自定义的类型,查询和存储时方便操作json类型的数据,不用再进行相应的转换</p><p><strong>三.简单的使用</strong><br><br>由于jsonb有自带的语法,方便操作json数据,所以自己也尝试写了一些例子.   </p><ul><li>插入操作<blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> invoices <span class="keyword">values</span>(<span class="string">'&#123;"id":1,"name":"test"&#125;'</span>) </span><br></pre></td></tr></table></div></figure></blockquote></li><li>更新操作<blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> invoices </span><br><span class="line"><span class="keyword">SET</span> invoices_list = jsonb_set(invoices_list,<span class="string">'&#123;1,"uid"&#125;'</span>,<span class="string">'"222"'</span>,<span class="literal">false</span>) </span><br><span class="line"><span class="keyword">WHERE</span> uid = <span class="string">''</span> </span><br></pre></td></tr></table></div></figure></blockquote><ul><li>这里对自带的函数jsonb_set使用方法做下介绍:<br></li><li><strong>jsonb_set</strong>(target jsonb, path text[], new_value jsonb[,create_missing boolean])<br></li><li><strong>target</strong>： 这是目的json数据，这里使用内部关联将对应的json查询出来<br></li><li><strong>path</strong>： json数据对应的key值<br></li><li><strong>new_value</strong>: json数据替换的value值<br></li><li><strong>create_missing</strong>： true - 如果不存在对应的key值，则新增，反之，false - 不做其他操作，这里可有可无    </li></ul></li><li>查询操作<blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    1.select info <span class="keyword">from</span> dual <span class="keyword">where</span> info @&gt; <span class="string">'&#123;"id":1&#125;'</span>::jsonb</span><br><span class="line">    <span class="number">2.</span><span class="keyword">SELECT</span> pos- <span class="number">1</span> </span><br><span class="line">     <span class="keyword">FROM</span> invoices invoices,jsonb_array_elements(invoices.invoices_list) <span class="keyword">with</span> <span class="keyword">ordinality</span> arr(elem, pos)</span><br><span class="line"><span class="keyword">WHERE</span> elem-&gt;&gt;<span class="string">'uid'</span> = <span class="string">'222'</span></span><br><span class="line">    <span class="number">3.</span><span class="keyword">SELECT</span></span><br><span class="line">   json_array_elements(invoices_list::<span class="keyword">json</span>) -&gt; <span class="string">'uid'</span>,</span><br><span class="line">   json_array_elements(invoices_list::<span class="keyword">json</span>) -&gt; <span class="string">'email'</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">   invoices </span><br></pre></td></tr></table></div></figure></blockquote><ul><li>第一条语句中@符号作为查询符号,可查询jsonb中是否有匹配id=1的数据<br><br>第二条语句可以查询json数组中是否有匹配的数据,elem表示数组中每一条数据,-&gt;&gt;可以匹配这一条数据某个字段<br><br>第三条语句方便查询数组每条数据的指定字段</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PgSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存更新策略</title>
      <link href="/2020/05/01/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/"/>
      <url>/2020/05/01/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>前言:最近发现在金额计算时存在某个慢接口,由于该接口需要跨服务请求一些计算规则信息,而这部分功能之前没有考虑到使用缓存去优化,导致查询效率会大大降低,所以决定通过二级缓存去解决</li><li>常见缓存更新策略有以下几种方式.<br><ol><li>Cache Aside 模式(先更新数据库，再删缓存)<br></li><li>Read/Write Through 模式(缓存服务作为主要的存储)<br></li><li>Write Behind 模式(应用要读数据和更新数据都直接访问缓存服务,缓存再异步更新数据到数据库)<br></li></ol></li></ul><hr><ul><li>经过选择准备使用常用的第一种方式作为自己的缓存更新策略.<br>具体的实现方式就是采用go-cache(一个基于内存的、高速的,存储k-v格式的缓存工具,并可以被多个goroutine安全地使用)作为一级缓存,redis作为自己二级缓存,读取数据时先从内存中读取,没有再从redis中获取,最后再从数据中获取;更新数据时,先更新数据库数据,然后删除缓存.</li><li>下面是实现的部分Golang代码<blockquote><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取规则</span></span><br><span class="line">cacheData, found := cache.Get()</span><br><span class="line"><span class="keyword">if</span> found &#123;</span><br><span class="line">oldMinimumChargeRuleDTO = cacheData.(MinimumChargeRuleDTO)</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果本地缓存中没有则从redis中取</span></span><br><span class="line"> <span class="keyword">var</span> oldMinimumChargeRuleDTOByte []<span class="keyword">byte</span></span><br><span class="line">oldMinimumChargeRuleDTOByte, err = specialdb.Redis.Get(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != redis.ErrNil &#123;</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, errors.New(<span class="string">"获取规则缓存失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果redis中也获取不到则从数据库中获取</span></span><br><span class="line"><span class="keyword">if</span> err == redis.ErrNil &#123;</span><br><span class="line">minimumChargeRuleModel := models.MinimumChargeRule&#123;Db: s.Db, TenantID: s.TenantID, ShopCode: s.ShopCode&#125;</span><br><span class="line"><span class="keyword">var</span> minimumChargeRule models.MinimumChargeRule</span><br><span class="line">minimumChargeRule, err = minimumChargeRuleModel.GetMinimumChargeRuleByShopCode()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != gorm.ErrRecordNotFound &#123;</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, errors.New(<span class="string">"查询规则失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> minimumChargeRule.UID == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, <span class="literal">nil</span></span><br><span class="line"><span class="comment">//将规则重新加入到缓存</span></span><br><span class="line">cache.Update(oldMinimumChargeRuleDTO)</span><br><span class="line">err = specialdb.Redis.Set(key, oldMinimumChargeRuleDTO, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">soelog.Logger.Info(<span class="string">"规则加入缓存失败:"</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, errors.New(<span class="string">"规则加入缓存失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新本地缓存</span></span><br><span class="line">cache.Update(oldMinimumChargeRuleDTO)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//更新规则</span></span><br><span class="line"><span class="keyword">return</span> minimumChargeRuleDTO, specialdb.Transaction(s.Tx, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">//TODO 更新数据库数据</span></span><br><span class="line"><span class="comment">//删除缓存</span></span><br><span class="line">cache.Delete()</span><br><span class="line">_, err = specialdb.Redis.Delete(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> oldMinimumChargeRuleDTO, errors.New(<span class="string">"删除规则缓存失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis过期监听</title>
      <link href="/2020/04/20/redis%E8%BF%87%E6%9C%9F%E7%9B%91%E5%90%AC/"/>
      <url>/2020/04/20/redis%E8%BF%87%E6%9C%9F%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;&nbsp;&nbsp;&nbsp;最近在做的商城项目需要实现一个超时自动关闭订单的功能,首先想到的就是定时任务轮询实现这个功能,但是轮询效率可能不太高,还会占用一定的资源,于是就想找找有没有其他更加简便的方法可以替代.</p><hr><ul><li>通过查找相关资料,总结以下三种方法.<ul><li>定时任务轮询</li><li>redis过期监听</li><li>延迟队列(Rabbit 死信队列)</li></ul></li><li>以上方法都可以实现我目前的需求,由于该项目后期的每日订单量不会很大,在下单时就采用了redis计数器来防止重复下单,于是决定使用redis自带的过期监听</br><br>注:对于并发量高的场景以及存在redis集群的情况下不太适合采用此方法,并且该方法暂时没有重试机制,可以选择第三种方法.</li></ul><hr>        <h3 id="二-配置"   >          <a href="#二-配置" class="heading-link"><i class="fas fa-link"></i></a>二.配置</h3>      <ul><li>相关命令配置<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-9.png"  alt="upload successful">      </li></ul><p> <strong>java</strong></p><ul><li>配置redisconfig<blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListenerConfig</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">       RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">       container.setConnectionFactory(connectionFactory);</span><br><span class="line">       <span class="keyword">return</span> container;</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote></li><li>创建监听器<blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyExpirationListener</span> <span class="keyword">extends</span> <span class="title">KeyExpirationEventMessageListener</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RedisKeyExpirationListener</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(listenerContainer);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//获取到redis中过期的key 开始处理相关业务 </span></span><br><span class="line">       String expiredKey = message.toString();</span><br><span class="line">     <span class="comment">//TODO </span></span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote></li></ul><p><strong>go</strong></p><blockquote><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  <span class="comment">/*获取redis连接*/</span></span><br><span class="line">conn := specialdb.Redis.Pool.Get()</span><br><span class="line">conn.Do(<span class="string">"CONFIG"</span>, <span class="string">"SET"</span>, <span class="string">"notify-keyspace-events"</span>, <span class="string">"KEx"</span>)</span><br><span class="line">psc := redis.PubSubConn&#123;Conn: conn&#125;</span><br><span class="line">psc.PSubscribe(<span class="string">"__keyspace@0__:"</span> + MessagerCache + <span class="string">"*"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> msg := psc.Receive().(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> redis.Message:</span><br><span class="line"><span class="comment">//监听过期key</span></span><br><span class="line">messageType := <span class="keyword">string</span>(msg.Data)</span><br><span class="line"><span class="keyword">if</span> messageType == <span class="string">"expired"</span> &#123;</span><br><span class="line"><span class="comment">//TODO 业务逻辑处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> redis.Subscription:</span><br><span class="line">soelog.Logger.Info(fmt.Sprintf(<span class="string">"开始监听redis过期key,消息类型:%s,消息pattern:%s"</span>, msg.Kind, msg.Channel))</span><br><span class="line"><span class="keyword">if</span> msg.Count == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> error:</span><br><span class="line">soelog.Logger.Error(fmt.Sprintf(<span class="string">"error: %v\n"</span>, msg))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote>     <div class="note-plugin info">      <span class="note-plugin__icon note-plugin__icon--info">              <i class="fas fa-info-circle"></i>            </span>      <p>如果还涉及到处理商品库存等操作,可以考虑设计成观察者模式,同时对多个对象进行处理</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用触发器进行分表操作</title>
      <link href="/2020/03/15/%E4%BD%BF%E7%94%A8%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%88%86%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/03/15/%E4%BD%BF%E7%94%A8%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%88%86%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>一.背景</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目中需要记录订单操作的详细日志,随着后面用户量增多,数据量会比较大,所以采用触发器的进行分表操作.<br><br><strong>二.分析</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于系统存在多租户的情况,为了保证数据的准确性和后期迁移,决定按照租户号进行划分主表.</p><blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建分表触发器</span></span><br><span class="line">1.先创建好主表</span><br><span class="line">2.创建触发器函数</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> update_log_partition_trigger()  </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">TRIGGER</span> <span class="keyword">AS</span> $$ </span><br><span class="line"><span class="comment">#创建变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> tenant_code_text <span class="built_in">TEXT</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> insert_statement <span class="built_in">TEXT</span>;  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SELECT</span> NEW.tenant_code <span class="keyword">INTO</span> tenant_code_text;  </span><br><span class="line">   insert_statement := '<span class="keyword">INSERT</span> <span class="keyword">INTO</span> update_log_<span class="string">'  </span></span><br><span class="line"><span class="string">       || tenant_code_text  </span></span><br><span class="line"><span class="string">       ||'</span> <span class="keyword">VALUES</span> ($<span class="number">1.</span>*)<span class="string">';  </span></span><br><span class="line"><span class="string">   EXECUTE insert_statement USING NEW;  </span></span><br><span class="line"><span class="string">   RETURN NULL;  </span></span><br><span class="line"><span class="string">  EXCEPTION  </span></span><br><span class="line"><span class="string">   WHEN UNDEFINED_TABLE  </span></span><br><span class="line"><span class="string">   THEN  </span></span><br><span class="line"><span class="string">       EXECUTE  </span></span><br><span class="line"><span class="string">           '</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> update_log_<span class="string">'  </span></span><br><span class="line"><span class="string">           || tenant_code_text  </span></span><br><span class="line"><span class="string">           || '</span>(<span class="keyword">CHECK</span> (tenant_code = <span class="string">'''  </span></span><br><span class="line"><span class="string">           || tenant_code_text  </span></span><br><span class="line"><span class="string">           || '''</span>)) INHERITS (<span class="string">"update_log"</span>)<span class="string">';  </span></span><br><span class="line"><span class="string">       RAISE NOTICE '</span><span class="keyword">CREATE</span> NON-EXISTANT <span class="keyword">TABLE</span> update_log_%<span class="string">', tenant_code_text; </span></span><br><span class="line"><span class="string">注:使用INHERITS创建的新表会继承一个或多个父表，</span></span><br><span class="line"><span class="string">子表只会继承父表的表结构和NOT NULL，DEFAULT，CHECK三种 </span></span><br><span class="line"><span class="string">约束，主键，外键和唯一键以及索引不会被继承，所以修改父表的结构（增删字段），NOT NULL，DEFAULT和CHECK约束会自动同步子表修改。</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#EXECUTE语句可以执行存放SQL语句的字符串变量，或直接执行SQL语句字符串</span></span><br><span class="line"><span class="string">       EXECUTE   '</span><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> update_log_checkoutid_idx_<span class="string">'  </span></span><br><span class="line"><span class="string">           || tenant_code_text  </span></span><br><span class="line"><span class="string">           || '</span> <span class="keyword">ON</span> update_log_<span class="string">'  </span></span><br><span class="line"><span class="string">           || tenant_code_text  </span></span><br><span class="line"><span class="string">           || '</span>(check_out_id <span class="keyword">DESC</span>) <span class="string">';  </span></span><br><span class="line"><span class="string">       EXECUTE  '</span><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> update_log_tenantid_idx_<span class="string">'  </span></span><br><span class="line"><span class="string">           || tenant_code_text  </span></span><br><span class="line"><span class="string">           || '</span> <span class="keyword">ON</span> update_log_<span class="string">'  </span></span><br><span class="line"><span class="string">           || tenant_code_text  </span></span><br><span class="line"><span class="string">           || '</span>(tenant_id <span class="keyword">DESC</span>) <span class="string">'; </span></span><br><span class="line"><span class="string">      EXECUTE insert_statement USING NEW;        </span></span><br><span class="line"><span class="string">   RETURN NULL;  </span></span><br><span class="line"><span class="string">END;  </span></span><br><span class="line"><span class="string">$$  </span></span><br><span class="line"><span class="string">LANGUAGE plpgsql; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.挂载分区Trigger </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TRIGGER update_log_partition_trigger  </span></span><br><span class="line"><span class="string">BEFORE INSERT ON "update_log"  </span></span><br><span class="line"><span class="string">FOR EACH ROW EXECUTE PROCEDURE update_log_partition_trigger(); </span></span><br></pre></td></tr></table></div></figure><p>创建完成后,往主表插入数据时会自动创建分表并插入相关数据.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PgSql </tag>
            
            <tag> 触发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包项目成docker镜像时配置动态环境参数</title>
      <link href="/2020/03/01/%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/01/%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <h4 id="第一步-创建一个start-sh"   >          <a href="#第一步-创建一个start-sh" class="heading-link"><i class="fas fa-link"></i></a>第一步: 创建一个start.sh</h4>      <blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">docker_setup_env() &#123;</span><br><span class="line">if [ -f config.json ]; then</span><br><span class="line">    #replace first config file</span><br><span class="line">    #开始替换dockerfile中配置的环境变量,echo &gt;&amp;2 把结果输出到和标准错误一样</span><br><span class="line">    echo &gt;&amp;2 "setup1--env db-config start replace: $DB_CONFIG"</span><br><span class="line">    count=0</span><br><span class="line">    #DB_CONFIG改成dockerfile中自己配置的环境变量名称</span><br><span class="line">    for var in $(echo $&#123;DB_CONFIG&#125; | awk '&#123;len=split($0,a,";");for(i=1;i&lt;=len;i++) print a[i]&#125;')</span><br><span class="line">    do  </span><br><span class="line">      count=`expr $count + 1` </span><br><span class="line">if [ "$count" -eq 1 ]  #替换第1个参数,g替换全部参数  </span><br><span class="line"> then </span><br><span class="line">   sed -i  "s/\$DBServer/$&#123;var&#125;/g" config.json #替换服务IP</span><br><span class="line">fi</span><br><span class="line">       if [ "$count" -eq 2 ]  #替换第2个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i  "s/\$DBPort/$&#123;var&#125;/g" config.json #替换服务端口</span><br><span class="line">fi</span><br><span class="line">       if [ "$count" -eq 3 ]  #替换第3个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i  "s/\$DBUser/$&#123;var&#125;/g" config.json #替换数据库用户</span><br><span class="line">fi</span><br><span class="line">       if [ "$count" -eq 4 ] #替换第4个参数   </span><br><span class="line"> then </span><br><span class="line">   sed -i  "s/\$DBPwd/$&#123;var&#125;/g" config.json #替换数据库密码</span><br><span class="line">fi</span><br><span class="line">       if [ "$count" -eq 5 ] #替换第5个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i  "s/\$DBName/$&#123;var&#125;/g" config.json #替换数据库名称</span><br><span class="line">fi</span><br><span class="line">    done</span><br><span class="line">    if [ "$count" -eq 5 ]; then </span><br><span class="line">      echo &gt;&amp;2 "--------env db-config replace to config.json success"</span><br><span class="line">    else</span><br><span class="line">      echo &gt;&amp;2 "error: envfile db_config is error"</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">    #replace second config file</span><br><span class="line">    echo &gt;&amp;2 "setup2--env redis-config start replace: $REDIS_CONFIG"</span><br><span class="line">    count=0</span><br><span class="line">    for var in $(echo $&#123;REDIS_CONFIG&#125; | awk '&#123;len=split($0,a,";");for(i=1;i&lt;=len;i++) print a[i]&#125;')</span><br><span class="line">    do  </span><br><span class="line">      count=`expr $count + 1` </span><br><span class="line">if [ "$count" -eq 1 ]  #替换第1个参数  </span><br><span class="line"> then </span><br><span class="line">   sed -i "s/\$RedisHost/$&#123;var&#125;/g" config.json #替换RedisIP</span><br><span class="line">fi</span><br><span class="line">       if [ "$count" -eq 2 ]  #替换第2个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i "s/\$RedisPwd/$&#123;var&#125;/g" config.json #替换Redis密码</span><br><span class="line">fi</span><br><span class="line">       if [ "$count" -eq 3 ]  #替换第3个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i "s/\$RedisMaxIdle/$&#123;var&#125;/g" config.json #替换Redis最大空闲数</span><br><span class="line">fi</span><br><span class="line">    if [ "$count" -eq 4 ]  #替换第4个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i "s/\$RedisMaxActive/$&#123;var&#125;/g" config.json #替换Redis最大连接数</span><br><span class="line">   fi</span><br><span class="line">if [ "$count" -eq 5 ]  #替换第5个参数    </span><br><span class="line"> then </span><br><span class="line">   sed -i "s/\$RedisIdleTimeout/$&#123;var&#125;/g" config.json #替换Redis最大等待时间</span><br><span class="line">   fi</span><br><span class="line">    done</span><br><span class="line">    if [ "$count" -eq 5 ]; then </span><br><span class="line">      echo &gt;&amp;2 "--------env redis-config replace to config.json success"</span><br><span class="line">    else</span><br><span class="line">      echo &gt;&amp;2 "error: envfile regdis_config is error"</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">    unset count</span><br><span class="line">    echo &gt;&amp;2 "success: all config file is replaced"</span><br><span class="line">    cat config.json</span><br><span class="line">    return 0</span><br><span class="line"> else</span><br><span class="line">    echo &gt;&amp;2 "error: config.json! not exists "</span><br><span class="line">    return 1</span><br><span class="line"> fi</span><br><span class="line">&#125;</span><br><span class="line">main()  </span><br><span class="line">&#123;  </span><br><span class="line"> cd /home</span><br><span class="line"> docker_setup_env</span><br><span class="line"> if [ $? -eq 0 ]; then </span><br><span class="line">  echo &gt;&amp;2 "setup3--start up app "</span><br><span class="line"><span class="meta"> #</span><span class="bash">换成自己的项目名称</span></span><br><span class="line">  ./saas-test</span><br><span class="line"> else</span><br><span class="line">   echo &gt;&amp;2 "error: app exit $?"  </span><br><span class="line"> fi</span><br><span class="line">&#125;  </span><br><span class="line">main </span><br></pre></td></tr></table></div></figure><p>注意:Mac环境下执行sed -i命令时会出现invalid command code C错误,只需要在sed -i 后面加上””.如果项目环境参数为路径时,/需要用\进行转义,例:http://192.168.1.111:8080</p></blockquote>        <h4 id="第二步-修改Go项目中config文件-参数需要与start-sh脚本中的参数统一"   >          <a href="#第二步-修改Go项目中config文件-参数需要与start-sh脚本中的参数统一" class="heading-link"><i class="fas fa-link"></i></a>第二步:修改Go项目中config文件(参数需要与start.sh脚本中的参数统一)</h4>      <blockquote><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"DbConfig"</span>: &#123;</span><br><span class="line">   <span class="attr">"Server"</span>: <span class="string">"$DBServer"</span>,</span><br><span class="line">   <span class="attr">"DbName"</span>: <span class="string">"$DBName"</span>,</span><br><span class="line">   <span class="attr">"User"</span>: <span class="string">"$DBUser"</span>,</span><br><span class="line">   <span class="attr">"Password"</span>: <span class="string">"$DBPwd"</span>,</span><br><span class="line">   <span class="attr">"Port"</span>:$DBPort</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"RedisConfig"</span>: &#123;</span><br><span class="line">   <span class="attr">"Host"</span>: <span class="string">"$RedisHost"</span>,</span><br><span class="line">   <span class="attr">"Password"</span>: <span class="string">"$RedisPwd"</span>,</span><br><span class="line">   <span class="attr">"MaxIdle"</span>: $RedisMaxIdle,</span><br><span class="line">   <span class="attr">"MaxActive"</span>:$RedisMaxActive,</span><br><span class="line">   <span class="attr">"IdleTimeout"</span>:$RedisIdleTimeout</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure></blockquote>        <h4 id="第三步：当前目录创建一个-dockerfile-文件"   >          <a href="#第三步：当前目录创建一个-dockerfile-文件" class="heading-link"><i class="fas fa-link"></i></a>第三步：当前目录创建一个 dockerfile 文件</h4>      <blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.7</span><br><span class="line">MAINTAINER cj &lt;cj&gt;  --改成所属人</span><br><span class="line"></span><br><span class="line">COPY config.json &#x2F;home&#x2F;config.json   </span><br><span class="line">COPY saas-auxiliary-rest &#x2F;home&#x2F;saas-auxiliary-rest   --改成要打包的项目名称</span><br><span class="line">COPY start.sh    &#x2F;home&#x2F;start.sh</span><br><span class="line">RUN chmod +x     &#x2F;home&#x2F;start.sh</span><br><span class="line">RUN chmod +x     &#x2F;home&#x2F;saas-auxiliary-rest     --改成要打包的项目名称</span><br><span class="line">#根据自己的config设置start.sh中环境变量参数(参数之间以;分割),KubeSphere中配置环境变量时与该参数名一致,如有其它配置,另外新增</span><br><span class="line">ENV DB_CONFIG&#x3D;&quot;192.168.1.208;30000;admin;123456;saasauxiliarydb&quot;</span><br><span class="line">ENV REDIS_CONFIG&#x3D;&quot;192.168.1.208:6379;123456;30;30;200&quot;</span><br><span class="line"></span><br><span class="line">EXPOSE 8080   </span><br><span class="line">ENTRYPOINT [&quot;sh&quot;,&quot;&#x2F;home&#x2F;start.sh&quot;] </span><br></pre></td></tr></table></div></figure></blockquote><p>最后将所有文件打包成docker镜像发布即可.</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建YApi接口管理平台</title>
      <link href="/2019/12/20/Yapi/"/>
      <url>/2019/12/20/Yapi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> &nbsp;&nbsp;&nbsp;&nbsp;YApi旨在为开发、产品、测试人员提供更优雅的接口管理服务,并可以帮助开发者轻松创建、发布、维护 API.</p><hr><p><strong>官方说明文档</strong>:<span class="exturl"><a class="exturl__link"   href="https://hellosean1025.github.io/yapi/"  target="_blank" rel="noopener">YApi</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><p><strong>一.准备MongoDB环境</strong></p></li><li><p><strong>二.下载YApi到本地:<span class="exturl"><a class="exturl__link"   href="https://github.com/YMFE/yapi/releases"  target="_blank" rel="noopener">Github下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></strong> </p><blockquote><p>选择对应的YApi版本下载<br>wget -o yapi.tar.gz <span class="exturl"><a class="exturl__link"   href="https://github.com/YMFE/yapi/archive/v1.8.0.tar.gz"  target="_blank" rel="noopener">https://github.com/YMFE/yapi/archive/v1.8.0.tar.gz</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote></li><li><p><strong>三.编辑Dockerfile和config.json文件</strong></p><blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM node:12-alpine as builder</span><br><span class="line">RUN apk add --no-cache git python make openssl tar gcc</span><br><span class="line">COPY yapi.tar.gz &#x2F;home</span><br><span class="line">#版本根据对应Yapi版本修改</span><br><span class="line">RUN cd &#x2F;home &amp;&amp; tar zxvf yapi.tar.gz &amp;&amp; mkdir &#x2F;api &amp;&amp; mv &#x2F;home&#x2F;yapi-1.8.0 &#x2F;api&#x2F;vendors</span><br><span class="line">RUN cd &#x2F;api&#x2F;vendors &amp;&amp; \</span><br><span class="line">   npm install --production --registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">FROM node:12-alpine</span><br><span class="line">MAINTAINER cj</span><br><span class="line">ENV TZ&#x3D;&quot;Asia&#x2F;Shanghai&quot; HOME&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">WORKDIR $&#123;HOME&#125;</span><br><span class="line">COPY --from&#x3D;builder &#x2F;api&#x2F;vendors &#x2F;api&#x2F;vendors</span><br><span class="line">COPY config.json &#x2F;api&#x2F;</span><br><span class="line">EXPOSE 3000</span><br><span class="line">ENTRYPOINT [&quot;node&quot;]</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://github.com/YMFE/yapi/blob/master/config_example.json"  target="_blank" rel="noopener">官方配置文件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"port"</span>: <span class="string">"3000"</span>,</span><br><span class="line"> <span class="attr">"adminAccount"</span>: <span class="string">"admin@admin.com"</span>,</span><br><span class="line"> <span class="attr">"timeout"</span>:<span class="number">120000</span>,</span><br><span class="line"> <span class="attr">"db"</span>: &#123;</span><br><span class="line">   <span class="attr">"servername"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">   <span class="attr">"DATABASE"</span>: <span class="string">"yapi"</span>,</span><br><span class="line">   <span class="attr">"port"</span>: <span class="number">27017</span>,</span><br><span class="line">   <span class="attr">"user"</span>: <span class="string">"test1"</span>,</span><br><span class="line">   <span class="attr">"pass"</span>: <span class="string">"test1"</span>,</span><br><span class="line">   <span class="attr">"authSource"</span>: <span class="string">""</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"mail"</span>: &#123;</span><br><span class="line">   <span class="attr">"enable"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"host"</span>: <span class="string">"smtp.163.com"</span>,</span><br><span class="line">   <span class="attr">"port"</span>: <span class="number">465</span>,</span><br><span class="line">   <span class="attr">"from"</span>: <span class="string">"***@163.com"</span>,</span><br><span class="line">   <span class="attr">"auth"</span>: &#123;</span><br><span class="line">     <span class="attr">"user"</span>: <span class="string">"***@163.com"</span>,</span><br><span class="line">     <span class="attr">"pass"</span>: <span class="string">"*****"</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></div></figure></blockquote></li><li><p><strong>四:构建镜像,初始化YApi数据库,启动YApi服务</strong></p><blockquote><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#构建镜像</span><br><span class="line">docker build -t yapi .</span><br><span class="line">#初始化YApi数据库索引及管理员账号,默认会在Mongo中创建yapi数据库</span><br><span class="line">docker run -it --rm \</span><br><span class="line"> --entrypoint npm \</span><br><span class="line"> --workdir &#x2F;api&#x2F;vendors \</span><br><span class="line"> yapi \</span><br><span class="line"> run install-server</span><br><span class="line">#启动YApi服务</span><br><span class="line">docker run -d \</span><br><span class="line"> --name yapi \</span><br><span class="line"> --workdir &#x2F;api&#x2F;vendors \</span><br><span class="line"> -p 3000:3000 \</span><br><span class="line"> yapi \</span><br><span class="line"> server&#x2F;app.js </span><br></pre></td></tr></table></div></figure></blockquote></li><li><p><strong>五:访问YApi服务</strong><br><span class="exturl"><a class="exturl__link"   href="http://localhost:3000"  target="_blank" rel="noopener">http://localhost:3000</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 登录账号 <span class="exturl"><a class="exturl__link"   href="mailto:admin@admin.com" >admin@admin.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，密码 ymfe.org</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go model的使用</title>
      <link href="/2019/12/15/go-model%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/15/go-model%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><pre><code>包的版本控制总是一个包管理器绕不开的古老话题，由于之前的go项目都还是采用GoPath的方式拉取依赖包,go1.11版本推出了go mod的形式,告别原来必须将go项目放在指定位置,这样可以在任意的位置创建项目,也对依赖包进行了统一的管理.</code></pre></blockquote><hr><p> 1.go mod默认是关闭的,首先通过go env配置set GO111MODULE =on,并配置代理export GOPROXY=<span class="exturl"><a class="exturl__link"   href="https://goproxy.cn"  target="_blank" rel="noopener">https://goproxy.cn</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><br> 2.初始化go mod init &lt;项目模块名称&gt;,生成go.mod, go.sum文件<br></p><ul><li><strong>go.mod:</strong><blockquote><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//很重要,相当于替换了项目的根路径,项目之间的文件引用需要在此路径的基础上调用.</span></span><br><span class="line">module github.com/test</span><br><span class="line"><span class="keyword">go</span> <span class="number">1.13</span></span><br><span class="line">require (</span><br><span class="line"><span class="comment">//自动获取相关依赖包</span></span><br><span class="line"> )</span><br><span class="line"><span class="comment">//replace 指令替换成github上对应的库</span></span><br><span class="line"> replace (</span><br><span class="line">   golang.org/x/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190313024323</span>-a1f597ede03a =&gt; github.com/golang/crypto v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190313024323</span>-a1f597ede03a</span><br><span class="line">) </span><br></pre></td></tr></table></div></figure></blockquote></li><li><strong>go.sum:记录 dependency tree</strong><br></li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-1.png"  alt="upload successful">      <br> <strong>相关命令:</strong><br><br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/pasted-0.png"  alt="upload successful">      <br>注:go mod 的依赖包会默认下载到GOPATH 下pkg/mod下</p>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
